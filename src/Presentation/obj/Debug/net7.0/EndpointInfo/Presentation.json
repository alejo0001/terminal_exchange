{
  "x-generator": "NSwag v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Intranet_Crm",
    "version": "v1"
  },
  "paths": {
    "/api/Actions/ActionInfo": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Retrieves information about a specific process, including the day, call attempts, and the maximum number of attempts.",
        "operationId": "Actions_GetActionInfo",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- ActionInfoDto: Object containing process details such as the day, attempts, and maximum attempts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Actions/ByProcess": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Retrieves a list of actions associated with a specific process.",
        "operationId": "Actions_GetActionsByProcess",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- List`1: List of actions for the specified process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionChildViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Actions": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Creates a new action.",
        "operationId": "Actions_Create",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the necessary data to create an action:\n- CreateActionCommand: DTO with the details of the action to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActionCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- Int32: Identifier of the created action.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Actions/{id}": {
      "put": {
        "tags": [
          "Actions"
        ],
        "summary": "Updates an existing action.",
        "operationId": "Actions_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the action to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the updated data of the action:\n- Id: Must match the `id` parameter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successfully completed.\n- BadRequest if the `id` does not match the `Id` field in the command.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "summary": "Deletes an action.",
        "operationId": "Actions_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the action to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successfully completed.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Actions/HasActiveCall": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Checks if there is an active call for a specific process.",
        "operationId": "Actions_GetHasActiveCall",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- Boolean: `true` if there is an active call, otherwise `false`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Actions/ActiveCall": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Retrieves the details of an active call for the current user.",
        "operationId": "Actions_GetActiveCall",
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- ActiveCallDetailsDto: Object containing the details of the active call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveCallDetailsDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Actions/HasSentEmails/{processId}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Check, whether Action has it's Type\none of EmailPending, EmailSucceeded or\nEmailFailed.",
        "operationId": "Actions_CheckHasSentEmails",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "No such process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Annotations/Contact/List": {
      "get": {
        "tags": [
          "Annotations"
        ],
        "summary": "Retrieves a list of annotations associated with a specific contact.",
        "operationId": "Annotations_GetAnnotationsByContact",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- List`1: List of annotations associated with the specified contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Annotations": {
      "post": {
        "tags": [
          "Annotations"
        ],
        "summary": "Creates a new annotation.",
        "operationId": "Annotations_Create",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the necessary data to create an annotation:\n- CreateAnnotationCommand: DTO with the details of the annotation to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnotationCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- Int32: Identifier of the created annotation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Annotations/{id}": {
      "put": {
        "tags": [
          "Annotations"
        ],
        "summary": "Updates an existing annotation.",
        "operationId": "Annotations_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the annotation to be updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the updated data of the annotation:\n- Id: Must match the `id` parameter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnotationCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation completes successfully.\n- BadRequest if the `id` does not match the `Id` field in the command.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Annotations"
        ],
        "summary": "Deletes an annotation.",
        "operationId": "Annotations_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the annotation to be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation completes successfully.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Appointments/GetAppointmentsByProcess/{processId}": {
      "get": {
        "tags": [
          "Appointments"
        ],
        "summary": "Retrieves appointments associated with a specific process.",
        "operationId": "Appointments_GetAppointmentsByProcess",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the process for which appointments are to be retrieved.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- AppointmentDto: Object containing the appointment details (title, date, type).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Appointments": {
      "post": {
        "tags": [
          "Appointments"
        ],
        "summary": "Creates a new appointment associated with a specific contact and process.",
        "operationId": "Appointments_Create",
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the necessary data to create the appointment:\n- CreateAppointmentCommand: DTO with the appointment details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppointmentCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- Unique identifier of the created appointment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Appointments/{id}": {
      "put": {
        "tags": [
          "Appointments"
        ],
        "summary": "Updates the details of an existing appointment.",
        "operationId": "Appointments_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the appointment to be updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Command with the new appointment data:\n- UpdateAppointmentCommand: DTO with the updated information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppointmentCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appointments"
        ],
        "summary": "Deletes an existing appointment.",
        "operationId": "Appointments_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the appointment to be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/{contactId}/{processId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains the details of a specific contact.",
        "description": "This method returns detailed information about a contact.\n\nExample request:\n\n    GET /api/Contacts/GetDetails/123",
        "operationId": "Contacts_GetDetails",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "processId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "If the contact details were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactFullDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Creates a new contact in the system.",
        "description": "This method allows registering a new contact.\n\nExample request:\n\n    POST /api/Contacts/Create\n    {\n        \"Name\": \"New Contact\",\n        \"Email\": \"email@example.com\"\n    }",
        "operationId": "Contacts_Create",
        "requestBody": {
          "x-name": "command",
          "description": "Command with the information of the new contact.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The identifier of the created contact.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreated"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/{id}": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the information of an existing contact.",
        "description": "This method allows updating the data of a contact in the system.\n\nExample request:\n\n    PUT /api/Contacts/Update\n    {\n        \"ContactId\": 123,\n        \"Name\": \"New Name\",\n        \"Email\": \"newemail@example.com\"\n    }",
        "operationId": "Contacts_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Command with the updated data of the contact.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "If the contact information was successfully updated.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a contact from the database.",
        "description": "This method marks the contact as deleted and closes all associated processes.\nIt also deletes all related calendar events and marks the contact's notes,\nphone numbers, emails, and titles as deleted.\n\nExample request:\n\n    DELETE /api/Contacts/123",
        "operationId": "Contacts_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the contact to be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/AddToBlacklist": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a contact to the blacklist.",
        "description": "This method updates the status of a contact, closes the related process, removes associated events,\nand logs an action of type \"Blacklist\". It also synchronizes the contact's status in the database.\n\nExample request:\n\n    PUT /api/Contacts/AddToBlacklist\n    {\n        \"ContactId\": 123,\n        \"NewContactStatusId\": 2,\n        \"NewStatusReason\": \"Reason for change\",\n        \"NewStatusObservations\": \"Additional observations\",\n        \"ProcessId\": 456\n    }",
        "operationId": "Contacts_AddToBlacklist",
        "requestBody": {
          "x-name": "command",
          "description": "Command that contains the information necessary to perform the operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactToBlacklistCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the contact was successfully added to the blacklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/AddCourseToFavourite": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a course to the favorites list or removes it from it.",
        "description": "This method adds a course to the favorites list if command.CourseFavourite.CourseFavourite is true,\nor removes it if false. The course's status is updated in the database.\n\nExample request:\n\n    PUT /api/Courses/AddCourseToFavourite\n    {\n        \"ContactLeadId\": 123,\n        \"ProcessId\": 456,\n        \"CourseFavourite\": true\n    }",
        "operationId": "Contacts_AddCourseToFavourite",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to add or remove a course from favorites:\n- ContactLeadId: Identifier of the associated contact.\n- ProcessId: Identifier of the associated process.\n- CourseFavourite: Indicates whether the course should be added to favorites (true) or removed (false).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCourseToFavouriteCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the course was successfully added or removed from the favorites list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Gender": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a contact from the database.",
        "description": "This method marks the contact as deleted and closes all associated processes.\nIt also deletes all related calendar events and marks the contact's notes,\nphone numbers, emails, and titles as deleted.\n\nExample request:\n\n    DELETE /api/Contacts/123",
        "operationId": "Contacts_GetContactGenders",
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactGenderDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Address/Types": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of available address types.",
        "description": "This method queries the database to retrieve all available address types.\n\nExample request:\n\n    GET /api/Address/Types",
        "operationId": "Contacts_GetAddressTypes",
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the address types are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressTypeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Email/Types": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of available email types.",
        "description": "This method queries the database to retrieve all available email types.\n\nExample request:\n\n    GET /api/Email/Types",
        "operationId": "Contacts_GetEmailTypes",
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the email types are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailTypeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Phone/Types": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of available phone types.",
        "description": "This method queries the database to retrieve all available phone types.\n\nExample request:\n\n    GET /api/Phone/Types",
        "operationId": "Contacts_GetPhoneTypes",
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the phone types are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneTypeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Check/IdCard": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Verifies the contact information associated with an identification number.",
        "description": "This method searches the database for a contact associated with the provided identification number.\nIf the contact does not exist, it returns a ContactInfoDto object with default values.\nIf the contact exists, it checks if there are open processes and if a new process can be created.\n\nExample request:\n\n    GET /api/Check/IdCard?IdCard=12345678",
        "operationId": "Contacts_CheckContactIdCard",
        "parameters": [
          {
            "name": "IdCard",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the contact information is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Check/Email": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Verifies the contact information associated with an email address.",
        "description": "This method searches the database for a contact associated with the provided email address.\nIf the contact does not exist, it returns a ContactInfoDto object with default values.\nIf the contact exists, it checks if there are open processes and if a new process can be created.\n\nExample request:\n\n    GET /api/Check/Email?Email=example@example.com",
        "operationId": "Contacts_CheckContactEmail",
        "parameters": [
          {
            "name": "Email",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the contact information is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Check/Phone": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "operationId": "Contacts_CheckContactPhone",
        "parameters": [
          {
            "name": "PhonePrefix",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "Phone",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Leads": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Recovers a new lead contact based on the provided information.",
        "description": "This method creates a new lead contact in the database. \nIf the course country is not found, an exception is thrown.\n\nExample request:\n\n    POST /api/Leads\n    {\n        \"PhonePrefix\": \"1\",\n        \"Phone\": \"5551234567\",\n        \"Email\": \"example@example.com\",\n        \"CourseCountryId\": 1,\n        \"University\": \"TechUniversity\",\n        \"CourseId\": 123,\n        \"ContactId\": 456,\n        \"IsFavourite\": true,\n        \"Types\": [ \"Recommended\", \"OtherType\" ],\n        \"StartDateCourse\": \"2024-01-01\",\n        \"FinishDateCourse\": \"2024-12-31\"\n    }",
        "operationId": "Contacts_Recover",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to create a new lead contact:\n- CreateContactLeadCommand: Information of the lead contact to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactLeadCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An integer representing the identifier of the newly created lead contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Leads/List": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "operationId": "Contacts_GetContactLeadsByContactAndProcess",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactLeadDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Leads/List/contactId": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of lead contacts associated with a specific contact.",
        "description": "This method queries the database to retrieve all lead contacts associated with the specified contact.\n\nExample request:\n\n    GET /api/Leads/List/contactId?ContactId=123",
        "operationId": "Contacts_GetContactLeadsByContact",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the lead contacts are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactLeadDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Leads/{id}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a specific lead contact.",
        "description": "This method marks the lead contact as deleted in the database.\nIf the lead contact is not found, an exception is thrown.\n\nExample request:\n\n    DELETE /api/Leads/123",
        "operationId": "Contacts_DeleteContactLead",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the lead contact to be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ContactFaculties": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of faculties associated with a specific contact.",
        "description": "This method queries the database to retrieve all faculties associated with the specified contact.\n\nExample request:\n\n    GET /api/ContactFaculties?ContactId=123",
        "operationId": "Contacts_GetContactFaculties",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the faculties are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FacultyDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Faculties": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds faculties to a specific contact.",
        "description": "This method adds the specified faculties to the contact in the database.\nIf the contact is not found, an exception is thrown.\n\nExample request:\n\n    POST /api/Faculties\n    {\n        \"ContactId\": 123,\n        \"FacultiesId\": [1, 2, 3]\n    }",
        "operationId": "Contacts_AddFaculties",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to add faculties to the contact:\n- ContactId: Identifier of the contact to which the faculties will be added.\n- FacultiesId: List of identifiers of the faculties to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactFacultiesCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the faculties were successfully added to the contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Faculty": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a faculty associated with a specific contact.",
        "description": "This method removes the specified faculty from the contact in the database.\nIf the contact is not found, an exception is thrown.\n\nExample request:\n\n    DELETE /api/Faculty\n    {\n        \"FacultyId\": 1,\n        \"ContactId\": 123\n    }",
        "operationId": "Contacts_RemoveFaculty",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to delete the faculty:\n- FacultyId: Identifier of the faculty to be deleted.\n- ContactId: Identifier of the contact from which the faculty will be removed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveContactFacultyCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ContactSpecialities": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of specialties associated with a specific contact.",
        "description": "This method queries the database to retrieve all specialties associated with the specified contact.\n\nExample request:\n\n    GET /api/ContactSpecialities?ContactId=123",
        "operationId": "Contacts_GetContactSpecialities",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the specialties are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpecialityDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Specialities": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds specialties to a specific contact.",
        "description": "This method adds the specified specialties to the contact in the database.\nIf the contact is not found, an exception is thrown.\n\nExample request:\n\n    POST /api/Specialities\n    {\n        \"ContactId\": 123,\n        \"SpecialitiesId\": [1, 2, 3]\n    }",
        "operationId": "Contacts_AddSpecialities",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to add specialties to the contact:\n- ContactId: Identifier of the contact to which the specialties will be added.\n- SpecialitiesId: List of identifiers of the specialties to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactSpecialitiesCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the specialties were successfully added to the contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "operationId": "Contacts_RemoveSpecialities",
        "requestBody": {
          "x-name": "command",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveContactSpecialitiesCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Title/Types": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes specialties associated with a specific contact.",
        "description": "This method removes the specified specialties from the contact in the database.\nIf the contact is not found, an exception is thrown.\n\nExample request:\n\n    DELETE /api/Specialities\n    {\n        \"ContactId\": 123,\n        \"SpecialitiesId\": [1, 2, 3]\n    }",
        "operationId": "Contacts_GetTitleTypes",
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TitleTypeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Tlmk": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "operationId": "Contacts_GetContactInfoForTlmk",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "ApiKey",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoTlmkDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/AddEmailContact": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a new email address to a specific contact.",
        "description": "This method adds a new email address to the contact in the database.\nIf the contact is not found or if the email address already exists, an exception is thrown.\n\nExample request:\n\n    POST /api/AddEmailContact\n    {\n        \"ContactId\": 123,\n        \"Email\": \"example@example.com\",\n        \"EmailTypeId\": 1,\n        \"IsDefault\": true\n    }",
        "operationId": "Contacts_AddEmailContact",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to add the email address:\n- ContactId: Identifier of the contact to which the email address will be added.\n- Email: Email address to add.\n- EmailTypeId: Identifier of the email type.\n- IsDefault: Indicates whether the email address is the default one.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewContactEmailCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the email address was successfully added to the contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ContactEmails": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of email addresses associated with a specific contact.",
        "description": "This method queries the database to retrieve all email addresses associated with the specified contact.\n\nExample request:\n\n    GET /api/ContactEmails?ContactId=123",
        "operationId": "Contacts_GetContactEmails",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the email addresses are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactEmailDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ContactPhones": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of phone numbers associated with a specific contact.",
        "description": "This method queries the database to retrieve all phone numbers associated with the specified contact.\n\nExample request:\n\n    GET /api/ContactPhones?ContactId=123",
        "operationId": "Contacts_GetContactPhones",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the phone numbers are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactPhoneDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/GetContactById": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains the complete information of a specific contact by its identifier.",
        "description": "This method queries the database to retrieve all details of the specified contact.\n\nExample request:\n\n    GET /api/GetContactById?ContactId=123",
        "operationId": "Contacts_GetContactById",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the contact information is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactFullDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/UpdateCountryCode": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the country code of a specific contact.",
        "description": "This method updates the country code of the contact in the database.\nIf the contact is not found, an exception is thrown.\n\nExample request:\n\n    PUT /api/UpdateCountryCode\n    {\n        \"CountryCode\": \"US\",\n        \"ContactId\": 123\n    }",
        "operationId": "Contacts_UpdateCountryCode",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to update the country code:\n- CountryCode: New country code.\n- ContactId: Identifier of the contact whose country code will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCountryCodeCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/UpdateCurrency": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the currency of a specific contact.",
        "description": "This method updates the currency of the contact in the database.\nIf the contact is not found, an exception is thrown.\n\nExample request:\n\n    PUT /api/UpdateCurrency\n    {\n        \"CurrencyId\": 1,\n        \"ContactId\": 123\n    }",
        "operationId": "Contacts_UpdateCurrency",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary to update the currency:\n- CurrencyId: Identifier of the new currency.\n- ContactId: Identifier of the contact whose currency will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCurrencyCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ContactLead": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the information of a specific lead contact.",
        "description": "This method updates the information of the lead contact in the database.\nIf the identifier of the lead contact does not match that of the command, a bad request error is returned.\nIf the lead contact is not found, an error code is returned.\n\nExample request:\n\n    PUT /api/ContactLead/123\n    {\n        \"ContactLeadId\": 123,\n        \"Discount\": 10,\n        \"FinalPrice\": 200,\n        \"EnrollmentPercentage\": 50,\n        \"Fees\": 5,\n        \"CourseTypeBaseCode\": \"CT001\",\n        \"StartDateCourse\": \"2023-01-01\",\n        \"FinishDateCourse\": \"2023-12-31\",\n        \"ConvocationDate\": \"2023-12-01\",\n        \"CourseCode\": \"C001\",\n        \"Types\": [1, 2, 3]\n    }",
        "operationId": "Contacts_UpdateContactLead",
        "parameters": [
          {
            "name": "contactLeadId",
            "in": "query",
            "description": "Identifier of the lead contact to be updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary for the update:\n- ContactLeadId: Identifier of the lead contact.\n- Other fields from ContactLeadUpdateDto that can be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactLeadCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ContactLeads": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the information of multiple lead contacts.",
        "description": "This method updates the information of the lead contacts in the database.\n\nExample request:\n\n    PUT /api/ContactLeads\n    {\n        \"ContactLeads\": [\n            {\n                \"ContactLeadId\": 1,\n                \"Discount\": 10,\n                \"FinalPrice\": 200,\n                \"EnrollmentPercentage\": 50,\n                \"Fees\": 5,\n                \"CourseTypeBaseCode\": \"CT001\",\n                \"StartDateCourse\": \"2023-01-01\",\n                \"FinishDateCourse\": \"2023-12-31\",\n                \"ConvocationDate\": \"2023-12-01\",\n                \"Types\": [1, 2]\n            },\n            {\n                \"ContactLeadId\": 2,\n                \"Discount\": 15,\n                \"FinalPrice\": 250,\n                \"EnrollmentPercentage\": 60,\n                \"Fees\": 10,\n                \"CourseTypeBaseCode\": \"CT002\",\n                \"StartDateCourse\": \"2023-02-01\",\n                \"FinishDateCourse\": \"2023-11-30\",\n                \"ConvocationDate\": \"2023-11-15\",\n                \"Types\": [2, 3]\n            }\n        ]\n    }",
        "operationId": "Contacts_UpdateContactLeads",
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary for the update:\n- ContactLeads: List of objects representing the lead contacts to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactLeadsCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ContactLeadPrice": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the price of a specific lead contact.",
        "description": "This method updates the price of the lead contact in the database.\nIf the identifier of the lead contact does not match that of the command, a bad request error is returned.\nIf the lead contact is not found, an error code is returned.\n\nExample request:\n\n    PUT /api/ContactLeadPrice/123\n    {\n        \"ContactLeadId\": 123,\n        \"Discount\": 10,\n        \"Price\": 150,\n        \"FinalPrice\": 140,\n        \"EnrollmentPercentage\": 50,\n        \"Fees\": 5\n    }",
        "operationId": "Contacts_UpdateContactLeadPrice",
        "parameters": [
          {
            "name": "contactLeadId",
            "in": "query",
            "description": "Identifier of the lead contact to be updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Object that contains the parameters necessary for the update:\n- ContactLeadId: Identifier of the lead contact.\n- Other fields from ContactLeadPriceUpdateDto that can be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactLeadPriceCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "An object of type ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/GetContactByEmailOrPhone": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a specific contact using their email address or phone number.",
        "description": "This method queries the database to retrieve a contact based on the provided email address or phone number.\n\nExample request:\n\n    GET /api/GetContactByEmailOrPhone?Email=example@example.com\n    or\n    GET /api/GetContactByEmailOrPhone?Phone=1234567890",
        "operationId": "Contacts_GetContactByEmailOrPhone",
        "parameters": [
          {
            "name": "Data.CorrelationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "Data.Email",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "Data.Phone",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "Data.CountryCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the contact information is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactGetted"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/GetContactIsClient": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Checks if a specific contact is a client.",
        "description": "This method queries the database to determine if the specified contact has imported orders that are neither canceled nor pending.\n\nExample request:\n\n    GET /api/GetContactIsClient?ContactId=123\n    or\n    GET /api/GetContactIsClient?OriginContactId=456",
        "operationId": "Contacts_GetContactIsClient",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "OriginContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the contact's client status is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/GetContactUser": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Obtains a list of contact users based on the email address or phone number.",
        "description": "This method queries the database to retrieve contact users that match the provided email address or phone number.\n\nExample request:\n\n    GET /api/GetContactUser ?email=example@example.com\n    or\n    GET /api/GetContactUser ?phone=1234567890",
        "operationId": "Contacts_GetContactUser",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email address of the contact (optional).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone number of the contact (optional).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the contact users are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactUserDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/RecoverContactActivations": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Recupera y reactiva un proceso en el sistema, actualizando su fecha de creación\ny las acciones asociadas al mismo.",
        "operationId": "Contacts_RecoverContactActivations",
        "requestBody": {
          "x-name": "query",
          "description": "El comando que contiene el ID del proceso a recuperar.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverContactActivationsCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Operación exitosa. Retorna el ID del proceso actualizado.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ConsolidateToOtherContact": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Consolidates Contact related data from origin to destination contact. Origin will be soft-deleted.",
        "operationId": "Contacts_ConsolidateToOtherContact",
        "requestBody": {
          "x-name": "command",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsolidateContactsCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Validation failures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Contacts cannot be found by provided emails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Contacts cannot refer to the same Contact ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Among others, problem saving changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/ConsolidateToOtherContactById": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Consolidates Contact related data from origin to destination contact *by IDs*. Origin will be soft-deleted. As of now uses ApiKey and not token security model.",
        "operationId": "Contacts_ConsolidateToOtherContactById",
        "requestBody": {
          "x-name": "command",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsolidateContactsByIdCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Validation failures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Contacts cannot be found by provided IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Contacts cannot refer to the same Contact ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Among others, problem saving changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Countries/List": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Obtains a list of countries.",
        "description": "This method queries the database to retrieve the list of countries.\n\nExample request:\n\n    GET /api/Countries/List",
        "operationId": "Countries_GetCountries",
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the countries are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Coupons/CopyToCouponFp": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Copies the information of a contact to a FP coupon.",
        "description": "This method sends a command to copy the contact information to a FP coupon.\n\nExample request:\n\n    POST /api/CopyToCouponFp\n    {\n        \"ContactId\": 123,\n        \"ProcessId\": 456\n    }",
        "operationId": "Coupons_CopyToCouponFp",
        "requestBody": {
          "x-name": "command",
          "description": "Command that contains the necessary parameters for the operation:\n- ContactId: Identifier of the contact.\n- ProcessId: Identifier of the process.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyToCouponFpCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the operation is completed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/CouponsOrigins/List": {
      "get": {
        "tags": [
          "CouponsOrigins"
        ],
        "summary": "Obtains a list of coupon origins.",
        "description": "This method queries the database to retrieve the list of coupon origins that are not marked as deleted.\n\nExample request:\n\n    GET /api/CouponsOrigins/List",
        "operationId": "CouponsOrigins_GetCouponsOrigins",
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the coupon origins are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponsOriginsDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/CourseCountries": {
      "get": {
        "tags": [
          "CourseCountries"
        ],
        "operationId": "CourseCountries_GetCourseCountriesByCountryCodeAndLanguageCode",
        "parameters": [
          {
            "name": "CountryCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseCountryDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Courses/TopSellingByFacultiesAndCountry": {
      "get": {
        "tags": [
          "Courses"
        ],
        "operationId": "Courses_GetTopSellingByFacultiesAndCountry",
        "parameters": [
          {
            "name": "CountryCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "FacultiesId",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 2
          },
          {
            "name": "Quantity",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopSellingCourseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Courses/populate-missing-interested-courses-by-top-sellers": {
      "post": {
        "tags": [
          "Courses"
        ],
        "summary": "Population of missing interested courses based on the top-selling courses.",
        "description": "Note that this is a potentially long-running request and may result in a timeout during execution\n(nature of HTTP requests).\nNote! A timeout on the HTTP request (e.g., connection closes or timeout expires) will not stop execution.\nA log will always be recorded.",
        "operationId": "Courses_PopulateMissingInterestedCoursesByTopSellers",
        "requestBody": {
          "x-name": "command",
          "description": "Command that contains the necessary parameters for the operation:\n- Area: Area of interest.\n- CountryCode: Country code.\n- ApiKey: API key.\n- MaxJobContacts: Maximum contacts to process (optional).\n- ContactIds: Contact identifiers (optional).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PopulateMissingInterestedCoursesCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An object of type IActionResult indicating the status of the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PopulateMissingInterestedCoursesResult"
                }
              }
            }
          },
          "400": {
            "description": "If the request is invalid or required parameters are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Courses/populate-missing-interested-courses-by-top-sellers-nowait": {
      "post": {
        "tags": [
          "Courses"
        ],
        "summary": "Population of missing interested courses based on the top-selling courses without waiting.",
        "description": "This method initiates a process to populate the missing interested courses based on the top-selling courses.\nThe operation runs asynchronously and does not wait for completion.\n\nExample request:\n\n    POST /api/populate-missing-interested-courses-by-top-sellers-nowait",
        "operationId": "Courses_PopulateMissingInterestedCoursesByTopSellersNoWait",
        "requestBody": {
          "x-name": "command",
          "description": "Command that contains the necessary parameters for the operation:\n- Area: Area of interest.\n- CountryCode: Country code.\n- ApiKey: API key.\n- MaxJobContacts: Maximum contacts to process (optional).\n- ContactIds: Contact identifiers (optional).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PopulateMissingInterestedCoursesCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "202": {
            "description": "An object of type IActionResult indicating the status of the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "If the request is invalid or required parameters are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Currencies/CurrencyByCode": {
      "get": {
        "tags": [
          "Currencies"
        ],
        "summary": "Obtains the currency information based on the currency code.",
        "description": "This method queries the database to retrieve the currency information that matches the provided currency code.\n\nExample request:\n\n    GET /api/CurrencyByCode?CurrencyCode=USD",
        "operationId": "Currencies_GetCurrencyByCode",
        "parameters": [
          {
            "name": "CurrencyCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the currency information is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Emails": {
      "get": {
        "tags": [
          "Emails"
        ],
        "operationId": "Emails_GetEmailsByContactWithPagination",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 5
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfEmailPaginationDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Sends an email with the option to attach files.",
        "description": "This method allows sending an email, including the possibility of attaching files.\nThe operation runs asynchronously and returns the identifier of the sent email.\n\nExample request:\n\n    POST /api/send",
        "operationId": "Emails_Send",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Attachments": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "ContactId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "ContactLeadId": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "CourseId": {
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  },
                  "ProcessId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "To": {
                    "type": "string"
                  },
                  "Cc": {
                    "type": "string",
                    "nullable": true
                  },
                  "Bcc": {
                    "type": "string",
                    "nullable": true
                  },
                  "Subject": {
                    "type": "string"
                  },
                  "Body": {
                    "type": "string"
                  },
                  "Dossiers": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  },
                  "Colour": {
                    "$ref": "#/components/schemas/Colour"
                  },
                  "EmailDefault": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the identifier of the email is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Emails/{id}": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Obtains the details of an email based on its identifier.",
        "description": "This method queries the database to retrieve the details of the email that matches the provided identifier.\n\nExample request:\n\n    GET /api/emails/{id}",
        "operationId": "Emails_GetDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the email.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the details of the email are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailFullDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Emails/MailBoxFree": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Checks if the mailbox is free (LOGIC MISSING).",
        "description": "This method checks the status of the current user's mailbox to determine if it is free.\n\nExample request:\n\n    GET /api/MailBoxFree",
        "operationId": "Emails_GetMailBoxFree",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query that contains the necessary parameters for the operation (currently no parameters are required).",
            "schema": {
              "$ref": "#/components/schemas/GetMailBoxFreeQuery"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is processed successfully and the status of the mailbox is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Emails/byContactAndProcessId": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Gets emails send to client with process and contact id.",
        "operationId": "Emails_GetEmailsByContactAndProcess",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailFullDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Emails/SendEmailCommercialAssignment": {
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Send a Email to Client using correct Template.",
        "operationId": "Emails_SendEmailRecords2",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the parameters required to send the email:\n- ApiKey: API key required for authentication.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailCommercialAssignmentCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A string describing the operation's result, indicating the email delivery status."
          }
        }
      }
    },
    "/api/Emails/SendEmailRecords2ScholarshipActivation": {
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Send a email of Scholarship Activation R2 to Client using correct Template.",
        "operationId": "Emails_SendEmailScholarshipActivation",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the parameters required to send the email:\n- ApiKey: API key required for authentication.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailRecords2ScholarshipActivationCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A string describing the operation's result, indicating the email delivery status."
          }
        }
      }
    },
    "/api/Emails/SendEmailCloseProcesses": {
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Send a email for close Process to Client using correct Template (1.2.A).",
        "operationId": "Emails_SendEmailCloseProcesses",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the parameters required to send the email:\n- ApiKey: API key required for authentication.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailCloseProcessesCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A string describing the operation's result, indicating the email delivery status."
          }
        }
      }
    },
    "/api/Employee/GetAllManagerSubordinates": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves all subordinates of a manager.",
        "description": "This method queries the API to fetch all subordinates of the current manager.\n\nExample request:\n\n    GET /api/GetAllManagerSubordinates",
        "operationId": "Employee_GetAllManagerSubordinates",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query containing the necessary parameters for the operation (currently no parameters are required).",
            "schema": {
              "$ref": "#/components/schemas/GetAllManagerSubordinatesQuery"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the manager's subordinates are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeSubordinateViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Employee/GetAllManagerByEmployee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves the manager associated with an employee.",
        "description": "This method queries the database to fetch the manager of the current employee based on their corporate email.\n\nExample request:\n\n    GET /api/GetAllManagerByEmployee",
        "operationId": "Employee_GetAllManagerByEmployee",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query containing the necessary parameters for the operation (currently no parameters are required).",
            "schema": {
              "$ref": "#/components/schemas/GetManagerByEmployeeQuery"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the manager associated with the employee is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Employee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves the information of the logged-in employee.",
        "description": "This method queries the database to fetch the employee information associated with the currently logged-in user,\nusing their corporate email.\n\nExample request:\n\n    GET /api/GetLoggedEmployee",
        "operationId": "Employee_GetLoggedEmployee",
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the employee information is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Employee/Signatures/{corporateEmail}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves the signature associated with a corporate email.",
        "description": "This method queries the database to fetch the signature associated with the provided corporate email.\n\nExample request:\n\n    GET /api/Signatures/{corporateEmail}",
        "operationId": "Employee_GetSignature",
        "parameters": [
          {
            "name": "corporateEmail",
            "in": "path",
            "required": true,
            "description": "The corporate email of the employee.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the employee's signature is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Faculties/List": {
      "get": {
        "tags": [
          "Faculties"
        ],
        "summary": "Retrieves the list of faculties.",
        "description": "This method retrieves all faculties that are not deleted.\n\nExample request:\n\n    GET /api/List",
        "operationId": "Faculties_GetFaculties",
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the list of faculties is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FacultyDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Flows/GetFlows": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the list of flows.",
        "description": "This method retrieves all flows based on template proposals that have a tag identifier.\n\nExample request:\n\n    GET /api/GetFlows",
        "operationId": "Flows_GetFlows",
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the list of flows is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlowDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Flows/DuplicateFlow": {
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Duplicates an existing flow.",
        "description": "This method allows duplicating an existing flow, including its template proposals and associated templates.\n\nExample request:\n\n    POST /api/DuplicateFlow",
        "operationId": "Flows_DuplicateFlow",
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the necessary parameters for the operation:\n- OriginProcessType: Process type of the original flow.\n- OriginTagId: Tag identifier of the original flow.\n- TagId: Tag identifier for the new flow.\n- TagName: Tag name for the new flow.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DuplicateFlowCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the flow is duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      }
    },
    "/api/InvoicePaymentOptions": {
      "get": {
        "tags": [
          "InvoicePaymentOptions"
        ],
        "operationId": "InvoicePaymentOptions_GetInvoicePaymentOptionsByContactWithPagination",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 5
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfInvoicePaymentOptionDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "InvoicePaymentOptions"
        ],
        "summary": "Creates a new invoice payment option.",
        "description": "This method allows creating a new invoice payment option in the database.\n\nExample request:\n\n    POST /api/Create",
        "operationId": "InvoicePaymentOptions_Create",
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the necessary parameters for the operation:\n- Property1: Description of property 1 (adjust according to InvoicePaymentOptionCreateDto properties).\n- Property2: Description of property 2 (adjust according to InvoicePaymentOptionCreateDto properties).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoicePaymentOptionCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the identifier of the created invoice payment option is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/InvoicePaymentOptions/{id}": {
      "put": {
        "tags": [
          "InvoicePaymentOptions"
        ],
        "summary": "Updates an existing invoice payment option.",
        "description": "This method allows updating an existing invoice payment option in the database.\n\nExample request:\n\n    PUT /api/{id}",
        "operationId": "InvoicePaymentOptions_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the invoice payment option to be updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the necessary parameters for the operation:\n- Id: Identifier of the invoice payment option.\n- Property1: Description of property 1 (adjust according to InvoicePaymentOptionUpdateDto properties).\n- Property2: Description of property 2 (adjust according to InvoicePaymentOptionUpdateDto properties).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoicePaymentOptionCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "An ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InvoicePaymentOptions"
        ],
        "summary": "Deletes an existing invoice payment option.",
        "description": "This method allows deleting an invoice payment option from the database by marking it as deleted.\n\nExample request:\n\n    DELETE /api/{id}",
        "operationId": "InvoicePaymentOptions_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the invoice payment option to be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An ActionResult indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Languages": {
      "get": {
        "tags": [
          "Languages"
        ],
        "summary": "Retrieves the list of available languages.",
        "description": "This method retrieves all registered languages.\n\nExample request:\n\n    GET /api/GetLanguages",
        "operationId": "Languages_GetLanguages",
        "responses": {
          "200": {
            "description": "If the request is successfully processed and the list of languages is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LanguageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_Send",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "ContactLeadList",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 3
          },
          {
            "name": "Colour",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Colour"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/OrdersImported/paginated": {
      "get": {
        "tags": [
          "OrdersImported"
        ],
        "operationId": "OrdersImported_GetOrdersImportedByContact",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 5
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfOrdersImportedDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/OrdersImported": {
      "get": {
        "tags": [
          "OrdersImported"
        ],
        "operationId": "OrdersImported_GetOrdersImportedByContactAll",
        "parameters": [
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "ContactEmails",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrdersImportedDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/OrdersImported/{id}": {
      "get": {
        "tags": [
          "OrdersImported"
        ],
        "summary": "Retrieves the details of a specific imported order by its ID.",
        "description": "Example request:\n            \n    GET /api/orders-imported/{id}\n            \nReturns the details of the imported order corresponding to the provided ID.\n\nReturns the details of the specified imported order.\nIf no imported order is found with the specified ID.\nIf the user is not authorized to access this endpoint.\nIf an internal server error occurs.",
        "operationId": "OrdersImported_GetDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the imported order to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the imported order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersImportedDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/OrdersImported/Tlmk": {
      "post": {
        "tags": [
          "OrdersImported"
        ],
        "summary": "Creates and saves a new imported order from TLMK.",
        "description": "Example request:\n            \n    POST /api/orders-imported/Tlmk\n    {\n        \"ApiKey\": \"api-key\",\n        \"NumPedido\": \"12345\",\n        \"Nombre\": \"Juan Pérez\",\n        \"Email\": \"juan.perez@example.com\",\n        \"Titulo\": \"Programming Course\"    \n    }\n            \nReturns the ID of the created imported order.\nIf the order data is invalid.\nIf the user is not authorized to perform this operation.\nIf an internal server error occurs.",
        "operationId": "OrdersImported_SaveOrderFromTlmk",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing the information of the order to be imported from TLMK.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrdersImportedFromTlmkCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The ID of the created imported order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/OrdersImported/SetProcessStatusByOrderNumber": {
      "put": {
        "tags": [
          "OrdersImported"
        ],
        "summary": "Updates the status of a process based on the order number.",
        "description": "Example request:\n            \n    PUT /api/orders-imported/SetProcessStatusByOrderNumber\n    {\n        \"OrderNumber\": 12345,\n        \"Status\": \"Completed\",\n        \"Outcome\": \"Success\",\n        \"PaymentType\": \"CreditCard\"\n    }\n            \nReturns a string indicating that the operation was successful.\nIf the provided data is invalid.\nIf no order or process associated with the specified order number is found.\nIf an internal server error occurs.",
        "operationId": "OrdersImported_SetProcessByOrderNumber",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing the order number, the new process status, the outcome, and the payment type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetProcessStatusByOrderNumberCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A string indicating the result of the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/OrdersImported/DeleteOrderImportedFromTlmkByEmail": {
      "delete": {
        "tags": [
          "OrdersImported"
        ],
        "summary": "Deletes imported orders associated with a list of email addresses.",
        "description": "Example request:\n            \n    DELETE /api/orders-imported/DeleteOrderImportedFromTlmkByEmail\n    {\n        \"Emails\": [\"email1@example.com\", \"email2@example.com\"]\n    }\n            \nReturns a list of IDs of the deleted orders.\nIf the provided data is invalid.\nIf the user is not authorized to perform this operation.\nIf an internal server error occurs.",
        "operationId": "OrdersImported_DeleteOrderImportedFromTlmkByEmail",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing the list of email addresses associated with the orders to be deleted.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrderImportedFromTlmkByEmailCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A list of IDs of the deleted orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/InProgress": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves a list of processes that are \"in progress\" and related to the authenticated user.",
        "operationId": "Processes_GetProcessesInProgressByUser",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "CountryCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 8
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 9
          },
          {
            "name": "FacultiesList",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 10
          },
          {
            "name": "SpecialitiesList",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 11
          },
          {
            "name": "UserData",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "A PaginatedList`1 object containing the paginated list of processes in progress.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfProcessInProgressDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/InProgress2": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves a list of processes that are \"in progress\" and associated with a specific user.",
        "operationId": "Processes_GetProcessesInProgressByUser2",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "CountryCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 8
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 9
          },
          {
            "name": "FacultiesList",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 10
          },
          {
            "name": "SpecialitiesList",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 11
          },
          {
            "name": "UserData",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of in-progress processes as PaginatedList`1.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfProcessDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/NotSales": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves a paginated list of closed processes that did not result in a sale and are associated with the authenticated user.",
        "operationId": "Processes_GetProcessesNotSalesByUser",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 4
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A PaginatedList`1 object containing the paginated list of closed processes without a sale \nassociated with the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfProcessDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/Sales": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves a list of processes managed by a specific user, filtered by an optional sales type.",
        "operationId": "Processes_GetProcessesSalesByUser",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 4
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ProcessSalesDto objects representing the sales processes managed by the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfProcessDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/Pending": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves a paginated list of pending processes associated with a specific user.",
        "operationId": "Processes_GetProcessesPendingByUser",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "OrderBy",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 4
          },
          {
            "name": "Order",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 5
          },
          {
            "name": "UserData",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "A PaginatedList`1 object containing the paginated list of pending processes\nassociated with the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfProcessDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/Types/ActiveProcesses": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves the active process types associated with the current user.",
        "operationId": "Processes_GetTypesActiveProcesses",
        "responses": {
          "200": {
            "description": "A list of ProcessTypeDto objects representing the currently active (ongoing or pending) process types for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessTypeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/SaleStatus/{processId}": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves the sales status of a specific process.",
        "operationId": "Processes_GetProcessSaleStatus",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "required": true,
            "description": "Identifier of the process for which the sales status is to be obtained.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A ProcessSaleStatusDto object containing the sales status of the process.\n- SaleComplete: Indicates whether the sale is complete.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSaleStatusDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/SaleAttemtps/{processId}": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves the number of sales attempts for a specific process.",
        "operationId": "Processes_GetProcessSaleAttempts",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "required": true,
            "description": "Identifier of the process for which the number of sales attempts is to be obtained.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A ProcessSaleAttemtpsDto object containing the number of sales attempts for the process.\n- SaleAttemtps: Number of sales attempts recorded for the process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSaleAttemtpsDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/CanCreateRecoverProcess": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Checks if the current user can create a new recovery process.",
        "operationId": "Processes_CanCreateRecoverProcess",
        "responses": {
          "200": {
            "description": "A ActionResult<bool> indicating whether the user can create a recovery process.\n- true if the user can create a new recovery process; otherwise, false.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/DiscardReasons/List": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves a list of all available discard reasons.",
        "operationId": "Processes_GetAllDiscardReasons",
        "responses": {
          "200": {
            "description": "A list of DiscardReasonDto objects representing the discard reasons.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscardReasonDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/GetOpenProcessesByContactId/{contactId}": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Retrieves a list of open processes associated with a specific contact.",
        "operationId": "Processes_GetOpenProcessesByContactId",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "description": "Identifier of the contact for whom the open processes are to be retrieved.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ProcessDto objects representing the open processes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/GetSuggestedNextInteractionDate/{processId}/{dateLocalEmployee}": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Date Local Time with unspecified type Zone (without HourZone). Expected: 2024-09-03T09:00:00.000",
        "operationId": "Processes_GetSuggestedNextInteractionDate",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "required": true,
            "description": "Identifier of the process for which the suggested interaction date is to be obtained.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "dateLocalEmployee",
            "in": "path",
            "required": true,
            "description": "Employee's local date and time in string format, without a specified time zone. \nExpected format: 2024-09-03T09:34:56.789",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A suggested date and time for the next interaction, or null if it cannot be determined.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes": {
      "post": {
        "tags": [
          "Processes"
        ],
        "summary": "Creates a new process.",
        "operationId": "Processes_Create",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the necessary data for creating the process.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProcessCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The unique identifier (Int32) of the newly created process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/SetWebSaleProcessByEmailOrPhoneOrDniCommand": {
      "post": {
        "tags": [
          "Processes"
        ],
        "summary": "Sets a web sales process using the contact's email, phone, or ID.",
        "operationId": "Processes_SaleProcessByEmailOrPhoneOrDniCommand",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the parameters required to set the sales process:\n- Email: Contact's email address.\n- Phone: Contact's phone number.\n- Dni: Contact's ID.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetWebSaleProcessByEmailOrPhoneOrDniCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A Unit object indicating the operation was completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/{id}": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Updates the data of an existing process.",
        "operationId": "Processes_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier (Int32) of the process to be updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the updated data for the process. This command inherits from ProcessUpdateDto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcessCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Returns an HTTP result:\n- BadRequest if the identifier provided in the parameter does not match the ID in the command.\n- NoContent if the update is successfully completed.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Processes"
        ],
        "summary": "Marks a process as deleted by its identifier.",
        "operationId": "Processes_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the process to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successfully completed.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/ChangeProcessColor": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Changes the color associated with a specific process.",
        "operationId": "Processes_ChangeProcessColor",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "Color",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Colour"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successfully completed.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/CloseProcessSaleByOrderNumberOrEmail": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Closes pending sales processes based on the associated order number or email address.",
        "operationId": "Processes_CloseProcessSaleByOrderNumberOrEmail",
        "requestBody": {
          "x-name": "command",
          "description": "Object of type CloseProcessSaleByOrderNumberOrEmailCommand containing a list of \nOrderImportedUpdateDto objects with the following information:\n- OrderNumber: Order number associated with the process.\n- PaymentType: Type of payment made.\n- PaymentDate: Date of the payment.\n- Status: Order status (e.g., \"CANCELLED\").",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseProcessSaleByOrderNumberOrEmailCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successfully completed.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/Reassign": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Reassigns a process to a different user.",
        "operationId": "Processes_ReassignProcess",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the data necessary for the reassignment:\n- ProcessId: Unique identifier of the process.\n- UserId: Identifier of the user to whom the process will be reassigned.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReassignProcessCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An HTTP response with:\n- NoContent if the operation is successfully completed.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/ReassignAllUserProcesses": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Reassigns all processes from one user to another user.",
        "operationId": "Processes_ReassignAllProcesses",
        "parameters": [
          {
            "name": "FromUserId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "ToUserId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "OnlyToDo",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response:\n- NoContent if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/ExternalSuccessfulSaleProcess": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Processes a successful external sale and updates the associated contact and process information.",
        "operationId": "Processes_ExternalSuccessfulSaleProcessCommand",
        "requestBody": {
          "x-name": "command",
          "description": "Object containing the parameters required to process the successful external sale:\n- ProcessId: Identifier of the associated process.\n- IdCard: Contact's ID.\n- Email: Contact's email address.\n- Address: Contact's address.\n- PostalCode: Postal code of the address.\n- Country: Country code.\n- Province: Province of the address.\n- City: City of the address.\n- OrderNumber: Order number.\n- OrderDate: Order date.\n- AcademicTitle: Academic title.\n- InitDate: Start date.\n- PaymentType: Payment type.\n- CurrencyCountry: Currency country.\n- NumberDeadLines: Number of installments.\n- SalesCountry: Sales country.\n- AmountRegistration: Registration amount.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalSuccessfulSaleProcessCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An ActionResult object indicating the operation's result.\n- NoContent if the operation was completed successfully.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/CloseProcesses": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Closes the processes specified in the list of process identifiers.",
        "operationId": "Processes_CloseProcessesCommand",
        "parameters": [
          {
            "name": "ProcessIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 1
          },
          {
            "name": "IsAutomatic",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "An ActionResult object indicating the operation's result.\n- NoContent if the operation was completed successfully.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/ReplaceProcessForPriorityCommercial": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Replaces an existing process with a new one for a priority commercial user.",
        "operationId": "Processes_ReplaceProcessForPriorityCommercial",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An ActionResult<int> object containing the identifier of the newly created process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Processes/ReturnBusinnesContactsDelivery": {
      "put": {
        "tags": [
          "Processes"
        ],
        "summary": "Devuelve los contactos comerciales para entrega basados en el correo electrónico corporativo proporcionado.",
        "description": "Este método realiza las siguientes operaciones:\n1. Obtiene el ID del usuario a partir del correo electrónico corporativo.\n2. Obtiene los IDs de contacto asociados al usuario.\n3. Actualiza la fecha de reparto de los contactos.\n4. Actualiza el estado de los procesos.",
        "operationId": "Processes_ReturnBusinnesContactsDelivery",
        "parameters": [
          {
            "name": "corporateEmail",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "ApiKey",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Las fechas de reparto y el estado de los procesos se actualizaron correctamente.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Si el comando es nulo o no válido.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Si ocurre un error interno en el servidor."
          }
        }
      }
    },
    "/api/ProcessSettings": {
      "get": {
        "tags": [
          "ProcessSettings"
        ],
        "summary": "Retrieves a list of process configuration types.",
        "description": "Example request:\n            \n    GET /api/process-settings/types\n            \nReturns a list of process configuration types that are not deleted and have an associated process type.\n\nReturns the list of process configuration types.\nIf the user is not authorized to access this endpoint.\nIf an internal server error occurs.",
        "operationId": "ProcessSettings_GetProcessSettingsTypes",
        "parameters": [
          {
            "name": "IsCouponsOnly",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of objects representing the process types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessTypeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/TemplateProposals": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "operationId": "Proposals_GetTemplateProposals",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfTemplateProposalDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/TemplateProposal": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "summary": "Retrieves the details of a specific template proposal.",
        "description": "Example request:\n            \n    GET /api/template-proposal/TemplateProposal?TemplateProposalId=123\n            \nReturns the details of the template proposal corresponding to the provided ID.\n\nReturns the details of the specified template proposal.\nIf the query data is invalid.\nIf no template proposal is found with the specified ID.\nIf the user is not authorized to access this resource.\nIf an internal server error occurs.",
        "operationId": "Proposals_GetTemplateProposal",
        "parameters": [
          {
            "name": "TempateProposalId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the specified template proposal.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateProposalDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals": {
      "post": {
        "tags": [
          "Proposals"
        ],
        "summary": "Creates a new template proposal.",
        "description": "Example request:\n            \n    POST /api/template-proposal\n    {\n        \"Name\": \"Template Proposal 1\",\n        \"ProcessType\": \"ProcessType\",\n        \"Day\": 5,\n        \"Attempt\": 3,\n        \"Colour\": \"#FF5733\",\n        \"CourseKnown\": true,\n        \"CourseTypeId\": 10,\n        \"HasToSendEmail\": true,\n        \"HasToSendWhatsApp\": false,\n        \"TagId\": 2\n    }\n            \nReturns the ID of the successfully created template proposal.\nIf the provided data is invalid.\nIf a necessary resource such as Tag or CourseType is not found.\nIf the user is not authorized to perform this operation.\nIf an internal server error occurs.",
        "operationId": "Proposals_Create",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing the necessary data to create the template proposal.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateProposalCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The ID of the created template proposal.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/{id}": {
      "put": {
        "tags": [
          "Proposals"
        ],
        "summary": "Updates an existing template proposal.",
        "description": "Example request:\n            \n    PUT /api/template-proposal/1\n    {\n        \"Id\": 1,\n        \"Name\": \"Updated Template Proposal\",\n        \"ProcessType\": \"NewProcessType\",\n        \"Day\": 10,\n        \"Attempt\": 2,\n        \"Colour\": \"#3366FF\",\n        \"CourseKnown\": false,\n        \"CourseTypeId\": 15,\n        \"HasToSendEmail\": false,\n        \"HasToSendWhatsApp\": true,\n        \"TagId\": 3\n    }\n            \nIndicates that the template proposal was successfully updated.\nIf the provided ID does not match the ID in the command or if the data is invalid.\nIf the template proposal or any associated resource such as Tag or CourseType is not found.\nIf the user is not authorized to perform this operation.\nIf an internal server error occurs.",
        "operationId": "Proposals_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the template proposal to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "The command containing the updated data for the template proposal.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateProposalCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "An HTTP status code indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Proposals"
        ],
        "summary": "Deletes a template proposal by marking it as deleted.",
        "description": "Example request:\n            \n    DELETE /api/template-proposal/1\n            \nMarks the specified template proposal as deleted.\n\nIndicates that the template proposal was successfully deleted.\nIf no template proposal is found with the specified ID.\nIf the user is not authorized to perform this operation.\nIf an internal server error occurs.",
        "operationId": "Proposals_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the template proposal to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP status code indicating the result of the operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/TemplatesFromTemplateProposal": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "summary": "Retrieves the templates associated with a specific template proposal.",
        "description": "Example request:\n            \n    GET /api/templates-from-template-proposal?TemplateProposalId=1\n            \nReturns the templates associated with the template proposal that have not been deleted.\n\nReturns the list of templates associated with the template proposal.\nIf the query parameters are invalid.\nIf the user is not authorized to access this endpoint.\nIf an internal server error occurs.",
        "operationId": "Proposals_GetTemplateProposalAll",
        "parameters": [
          {
            "name": "TempateProposalId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of templates associated with the specified template proposal.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateProposalTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/TemplatesFromTagId": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "summary": "Retrieves the templates associated with a specific tag identifier.",
        "description": "Example request:\n            \n    GET /api/templates-from-tag-id?TagId=1\n            \nReturns the templates that match the provided tag ID and have not been deleted.\n\nReturns the list of templates associated with the tag identifier.\nIf the query parameters are invalid.\nIf the user is not authorized to access this endpoint.\nIf an internal server error occurs.",
        "operationId": "Proposals_GetTemplatesFromTagIdAll",
        "parameters": [
          {
            "name": "TagId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of templates associated with the specified tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/SetTemplateInTemplateProposal": {
      "put": {
        "tags": [
          "Proposals"
        ],
        "summary": "Associates a specific template with an existing template proposal.",
        "description": "Example request:\n            \n    PUT /api/set-template-in-template-proposal\n    {\n        \"TemplateProposalId\": 1,\n        \"TemplateId\": 2\n    }\n            \nAssociates the template identified by `TemplateId` with the template proposal identified by `TemplateProposalId`.\n            \nIf the template is successfully associated with the template proposal.\nIf the provided parameters are invalid.\nIf the user is not authorized to perform this operation.\nIf the specified template proposal or template is not found.\nIf an internal server error occurs.",
        "operationId": "Proposals_SetTemplateInTemplateProposal",
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the identifiers of the template proposal and the template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTemplateInTemplateProposalCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A no-content result if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/TemplateDetails": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "summary": "Retrieves the details of a specific template by its identifier.",
        "description": "Example request:\n            \n    GET /TemplateDetails?TemplateId=1\n            \nRetrieves the details of the template identified by `TemplateId`.\n            \nReturns the details of the requested template.\nIf the provided parameters are invalid.\nIf the user is not authorized to perform this operation.\nIf the specified template is not found.\nIf an internal server error occurs.",
        "operationId": "Proposals_GetTemplatesFromTagId",
        "parameters": [
          {
            "name": "TemplateId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An object TemplateDetailsDto with the details of the template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDetailsDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/TemplatesProposalByTemplate": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "summary": "Retrieves a list of template proposals associated with a specific template.",
        "description": "Example request:\n            \n    GET /TemplatesProposalByTemplate?TemplateId=1\n            \nRetrieves all template proposals associated with the template identified by `TemplateId`.\n            \nReturns a list of template proposals associated with the specified template.\nIf the provided parameters are invalid.\nIf the user is not authorized to perform this operation.\nIf the specified template is not found.\nIf an internal server error occurs.",
        "operationId": "Proposals_GetTemplateProposalsByTemplate",
        "parameters": [
          {
            "name": "TemplateId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of TemplateProposalDto objects representing the associated template proposals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateProposalDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/AllTemplates": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "operationId": "Proposals_GetAllTemplates",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "QueryParams",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/CreateTemplate": {
      "post": {
        "tags": [
          "Proposals"
        ],
        "summary": "Creates a new template in the system.",
        "description": "Example request:\n            \n    POST /CreateTemplate\n    {\n        \"Name\": \"Template Name\",\n        \"Description\": \"Template Description\",\n        \"LanguageCode\": \"en\"\n    }\n            \nCreates a new template with the provided data. If a valid language code (`LanguageCode`) is specified, the template will be associated with the corresponding language.\n            \nThe template was successfully created, and its identifier is returned.\nIf the provided data is invalid.\nIf the user is not authorized to perform this operation.\nIf an internal server error occurs.",
        "operationId": "Proposals_CreateTemplate",
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the necessary data to create the template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The unique identifier of the newly created template.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/UpdateTemplate/{id}": {
      "put": {
        "tags": [
          "Proposals"
        ],
        "summary": "Updates the data of an existing template.",
        "description": "Example request:\n            \n    PUT /UpdateTemplate/1\n    {\n        \"Id\": 1,\n        \"Name\": \"Updated Template Name\",\n        \"Label\": \"Updated Label\",\n        \"Subject\": \"Updated Subject\",\n        \"Body\": \"Updated Body\",\n        \"Type\": \"New Type\",\n        \"LanguageCode\": \"es\",\n        \"CourseNeeded\": true,\n        \"Order\": 5,\n        \"TagId\": 10\n    }\n            \nUpdates the template identified by `Id` with the provided values. If a valid language code (`LanguageCode`) is specified, it will be associated with the corresponding language.\n            \nIf the template is successfully updated.\nIf the provided data is invalid.\nIf the user is not authorized to perform this operation.\nIf the specified template is not found.\nIf an internal server error occurs.",
        "operationId": "Proposals_UpdateTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the updated data of the template, including its identifier.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A no-content result if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/DeleteTemplate/{id}": {
      "delete": {
        "tags": [
          "Proposals"
        ],
        "summary": "Deletes (marks as deleted) an existing template in the system.",
        "description": "Example request:\n            \n    DELETE /DeleteTemplate/1\n            \nMarks the template identified by `id` as deleted (`IsDeleted = true`) without physically removing it from the database.\n            \nIf the template is successfully deleted.\nIf the provided identifier is invalid.\nIf the user is not authorized to perform this operation.\nIf the specified template is not found.\nIf an internal server error occurs.",
        "operationId": "Proposals_DeleteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the template to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A no-content result if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Proposals/DeleteTemplateInTemplateProposal": {
      "delete": {
        "tags": [
          "Proposals"
        ],
        "summary": "Deletes the relationships between a template and a template proposal.",
        "description": "Example request:\n            \n    DELETE /DeleteTemplateInTemplateProposal\n    {\n        \"TemplateProposalId\": 1,\n        \"TemplateId\": 2\n    }\n            \nMarks the relationships between the template identified by `TemplateId` and the template proposal identified by `TemplateProposalId` as deleted.\n            \nIf the relationships are successfully deleted.\nIf the provided data is invalid.\nIf the user is not authorized to perform this operation.\nIf the relationship between the template and the template proposal is not found.\nIf an internal server error occurs.",
        "operationId": "Proposals_DeleteTemplateInTemplateProposal",
        "requestBody": {
          "x-name": "command",
          "description": "Command containing the identifiers of the template and the template proposal to unlink.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTemplateInTemplateProposalCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A no-content result if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Specialities/Faculty/List": {
      "get": {
        "tags": [
          "Specialities"
        ],
        "operationId": "Specialities_GetSpecialitiesByFaculty",
        "parameters": [
          {
            "name": "FacultyId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "CourseCountryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpecialityDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Specialities/Faculties/List": {
      "get": {
        "tags": [
          "Specialities"
        ],
        "operationId": "Specialities_GetSpecialitiesByFaculties",
        "parameters": [
          {
            "name": "FacultiesId",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-position": 1
          },
          {
            "name": "CourseCountryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpecialityDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "operationId": "Templates_GetTemplates",
        "parameters": [
          {
            "name": "ProcessType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "TemplateType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/{templateId}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Retrieves the complete details of a specific template.",
        "description": "Example request:\n            \n    GET /api/templates/123\n            \nRetrieves the details of the template with the provided ID. Includes:\n- Language information.\n- Associated template proposals (that are not deleted).\n            \nIf the template details are successfully retrieved.\nIf the `templateId` parameter is invalid.\nIf no template is found with the provided ID.\nIf an internal server error occurs.",
        "operationId": "Templates_GetTemplateDetails",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the template.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A `TemplateDetailsDto` object containing the details of the specified template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDetailsDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/Proposal": {
      "get": {
        "tags": [
          "Templates"
        ],
        "operationId": "Templates_GetTemplateBundleProposal",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "CourseId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Response",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateBundleProposalViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/getId": {
      "get": {
        "tags": [
          "Templates"
        ],
        "operationId": "Templates_GetTemplateId",
        "parameters": [
          {
            "name": "ProcessType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "TemplateType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Day",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "Attempt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 5
          },
          {
            "name": "Colour",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "CourseKnown",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/getTemplate": {
      "get": {
        "tags": [
          "Templates"
        ],
        "operationId": "Templates_GetTemplate",
        "parameters": [
          {
            "name": "ProcessType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "TemplateType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Day",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "Attempt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 5
          },
          {
            "name": "Colour",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "CourseKnown",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/getTemplateByLabel": {
      "get": {
        "tags": [
          "Templates"
        ],
        "operationId": "Templates_GetTemplateByLabel",
        "parameters": [
          {
            "name": "ProcessType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "TemplateType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "Label",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/GetArgumentByProcessId": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Retrieves the details of an argument based on the process ID or the specific argument ID.",
        "description": "Example request:\n            \n    GET /api/templates/GetArgumentByProcessId?ProcessId=123\n    GET /api/templates/GetArgumentByProcessId?ArgumentId=456\n            \nThe parameters that can be sent are:\n- `ProcessId` (optional): ID of the process to search for a related argument.\n- `ArgumentId` (optional): Specific ID of an argument.\n            \nIf `ArgumentId` is provided, that argument will be searched directly. \nOtherwise, an attempt will be made to find an argument associated with the process specified by `ProcessId`.\n            \nIf an argument is found based on the criteria.\nIf no valid parameters are provided.\nIf no argument or associated process is found.\nIf an internal server error occurs.",
        "operationId": "Templates_GetArgumentByProcessId",
        "parameters": [
          {
            "name": "ProcessId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ArgumentId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A TemplateDetailsDto object containing the details of the found argument.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDetailsDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/UpdateContentInAllTemplates": {
      "put": {
        "tags": [
          "Templates"
        ],
        "operationId": "Templates_UpdateContentInAllTemplates",
        "parameters": [
          {
            "name": "ActualContent",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "NewContent",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffectedTemplatesViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/UploadTemplateAuditory": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Uploads a file with the completed audit template. Then, the contacts to be audited are inserted.",
        "description": "Example request:\n            \n    POST /api/audits/UploadTemplateAuditory\n    Headers:\n        Authorization: Bearer {token}\n    Body (multipart/form-data):\n        File: [File .xlsx/.csv/etc.]\n        Date: \"2025-01-15\" (optional)\n            \nThis endpoint uploads a file with audit data to blob storage. \nIf no date is provided, it defaults to using the next day's date.        \n            \nIf the file is uploaded successfully.\nIf an invalid file is provided or there are errors in the request.\nIf the user does not have the appropriate permissions.\nIf an internal error occurs during the upload process.",
        "operationId": "Templates_UploadTemplateAuditory",
        "requestBody": {
          "x-name": "command",
          "description": "An object UploadTemplateAuditoryCommand that contains the file to upload and an optional date.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadTemplateAuditoryCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An HTTP response with status 204 (No Content) if the operation is successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Templates/GetTemplateAuditory": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Send an empty template auditory by email.",
        "description": "This endpoint generates an email that includes a download link for an empty audit template. \nThe email is sent to the authenticated user's email address.\n            \n**Requirements:**\n- The user must have the **Auditor** role.\n            \n**Example request:**\n    GET /api/audits/GetTemplateAuditory\n    Headers:\n        Authorization: Bearer {token}\n            \n**Expected responses:**\n- `204 No Content`: If the email is sent successfully.\n- `403 Forbidden`: If the user does not have the appropriate permissions.\n- `500 Internal Server Error`: If an internal error occurred.\n            \n**Technical details:**\n- Uses a publishing service to send the email with a link to the file.\n- In case of an error, the event is logged for diagnostic purposes.",
        "operationId": "Templates_GetTemplateAuditory",
        "responses": {
          "204": {
            "description": "Email sent successfully."
          }
        }
      }
    },
    "/api/Templates/GetTemplateByNameCode": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get a template by Name Code",
        "operationId": "Templates_GetTemplateByNameCode",
        "parameters": [
          {
            "name": "NameCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "LanguageId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TemplateType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves the ID of the seller associated with the current authenticated user.",
        "description": "This endpoint obtains the seller ID (`IdVendedor`) linked to the email \nof the authenticated user.    \n            \n**Example request:**\n    GET /api/users/GetCurrentUser SellerId\n    Headers:\n        Authorization: Bearer {token}\n            \n**Expected responses:**\n- `200 OK`: Returns the associated seller ID.\n- `401 Unauthorized`: If the user is not authenticated.\n- `500 Internal Server Error`: If an internal error occurred.",
        "operationId": "Users_GetCurrentUserSellerId",
        "responses": {
          "200": {
            "description": "Returns the ID of the seller associated with the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/api/UtcTimeZone/utc": {
      "get": {
        "tags": [
          "UtcTimeZone"
        ],
        "summary": "Convierte una fecha y hora UTC a la zona horaria de un país específico.",
        "operationId": "UtcTimeZone_UtcTimeZone",
        "parameters": [
          {
            "name": "DestinationCountryIso",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "DatetimeFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Devuelve la fecha y hora convertida exitosamente.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/WebEnrollment": {
      "post": {
        "tags": [
          "WebEnrollment"
        ],
        "summary": "Creates a new web enrollment record.",
        "description": "This endpoint allows the creation of a new web enrollment record, associating it with an existing process and contact.\n            \n**Example request:**\n    POST /api/enrollments\n    Headers:\n        Authorization: Bearer {token}\n    Body:\n    {\n        \"processId\": 123,\n        \"contactId\": 456,\n        \"languageCode\": \"EN\",\n        ...\n    }",
        "operationId": "WebEnrollment_Create",
        "requestBody": {
          "x-name": "command",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebEnrollmentCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Enrollment created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebEnrollmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Whatsapp": {
      "post": {
        "tags": [
          "Whatsapp"
        ],
        "summary": "Sends a WhatsApp message using the provided data.",
        "description": "This endpoint allows sending a WhatsApp message to a specified contact. \nThe message data, including the content and the recipient, must be provided in the body of the request.\n            \n**Example request:**\n    POST /api/whatsapp\n    Headers:\n        Authorization: Bearer {token}\n    Body:\n    {\n        \"contactId\": 123,\n        \"message\": \"Hello, this is a test message.\"\n    }",
        "operationId": "Whatsapp_Create",
        "requestBody": {
          "x-name": "command",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendWhatsappCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Message sent successfully and recorded in the database.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionInfoDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "attemptsCalls": {
            "type": "integer",
            "format": "int32"
          },
          "isActive3X3X3": {
            "type": "boolean"
          },
          "maxAttemptsCalls": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ActionChildViewModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "finishDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "actionType": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "reassignment": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReassignmentDto"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentChildDto"
            }
          }
        }
      },
      "ReassignmentDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "fromUserId": {
            "type": "integer",
            "format": "int32"
          },
          "toUserId": {
            "type": "integer",
            "format": "int32"
          },
          "rassignerId": {
            "type": "integer",
            "format": "int32"
          },
          "fromUser": {
            "$ref": "#/components/schemas/UserDto"
          },
          "toUser": {
            "$ref": "#/components/schemas/UserDto"
          },
          "reassigner": {
            "$ref": "#/components/schemas/UserDto"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "AppointmentChildDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "actionId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "isAnnulled": {
            "type": "boolean"
          }
        }
      },
      "CreateActionCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ActionCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "actionType": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentDto"
            }
          }
        }
      },
      "AppointmentDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "actionId": {
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "action": {
            "$ref": "#/components/schemas/ActionChildDto"
          },
          "title": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ActionChildDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "finishDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          }
        }
      },
      "UpdateActionCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ActionUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "finishDate": {
            "type": "string",
            "format": "date-time"
          },
          "actionType": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentDto"
            }
          }
        }
      },
      "ActiveCallDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "firstSurName": {
            "type": "string"
          },
          "secondSurName": {
            "type": "string"
          },
          "processColour": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "contactPhone": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "process": {
            "$ref": "#/components/schemas/ProcessDto"
          }
        }
      },
      "ProcessDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactLanguageId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstSurname": {
            "type": "string"
          },
          "contactLanguage": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContactLanguageDto"
              }
            ]
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "ordersImported": {
            "$ref": "#/components/schemas/OrdersImportedChildDto"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "colour": {
            "type": "string",
            "nullable": true
          },
          "attempts": {
            "type": "integer",
            "format": "int32"
          },
          "activeCall": {
            "type": "boolean"
          },
          "lastActionDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastAction": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LastActionProcessDto"
              }
            ]
          },
          "nextAction": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AppointmentDto"
              }
            ]
          },
          "nextInteractionDate": {
            "type": "string",
            "format": "date-time"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionChildDto"
            }
          },
          "faculties": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FacultyDto"
            }
          },
          "specialities": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SpecialityDto"
            }
          },
          "initialDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ContactLanguageDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "languageId": {
            "type": "integer",
            "format": "int32"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageDto"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "LanguageDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "nativeName": {
            "type": "string"
          },
          "dateFormat": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "flagCode": {
            "type": "string"
          }
        }
      },
      "ContactDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "firstSurName": {
            "type": "string"
          },
          "secondSurName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "studentCIF": {
            "type": "string"
          },
          "fiscalCIF": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "contactTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/ContactTypeDto"
          },
          "contactStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ContactStatusDto"
          },
          "mainArea": {
            "type": "string"
          },
          "mainSpeciality": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "profession": {
            "type": "string"
          },
          "career": {
            "type": "string"
          },
          "contactGenderId": {
            "type": "integer",
            "format": "int32"
          },
          "gender": {
            "$ref": "#/components/schemas/ContactGenderDto"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nationality": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "lastSale": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "keyRegimeCode": {
            "type": "string",
            "nullable": true
          },
          "customerAccount": {
            "type": "string",
            "nullable": true
          },
          "occupation": {
            "type": "string",
            "nullable": true
          },
          "centerName": {
            "type": "string",
            "nullable": true
          },
          "workCenter": {
            "type": "string",
            "nullable": true
          },
          "observations": {
            "type": "string",
            "nullable": true
          },
          "originContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastInteraction": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextInteraction": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ContactTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ContactStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ContactGenderDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "OrdersImportedChildDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "actionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "studentName": {
            "type": "string",
            "nullable": true
          },
          "studentSurName": {
            "type": "string",
            "nullable": true
          },
          "orderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "area": {
            "type": "string",
            "nullable": true
          },
          "courseCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LastActionProcessDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string"
          },
          "courseTitle": {
            "type": "string"
          }
        }
      },
      "FacultyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "seoUrl": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "SpecialityDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "seoUrl": {
            "type": "string"
          },
          "seoTitle": {
            "type": "string"
          },
          "originalCategoryId": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "AnnotationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedBy": {
            "type": "string"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "lastEditor": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "mandatory": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          }
        }
      },
      "CreateAnnotationCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnotationCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AnnotationCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "lastEditor": {
            "type": "string"
          },
          "mandatory": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          }
        }
      },
      "UpdateAnnotationCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnotationUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AnnotationUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "lastEditor": {
            "type": "string"
          },
          "mandatory": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          }
        }
      },
      "CreateAppointmentCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppointmentCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AppointmentCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateAppointmentCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppointmentUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AppointmentUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "actionId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ContactFullDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "guid": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "firstSurName": {
            "type": "string"
          },
          "secondSurName": {
            "type": "string"
          },
          "studentCIF": {
            "type": "string"
          },
          "fiscalCIF": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string"
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CourseCountryDto"
              }
            ]
          },
          "currencyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "currency": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CurrencyDto"
              }
            ]
          },
          "contactTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/ContactTypeDto"
          },
          "contactStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ContactStatusDto"
          },
          "mainArea": {
            "type": "string"
          },
          "mainSpeciality": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "profession": {
            "type": "string"
          },
          "career": {
            "type": "string"
          },
          "contactGenderId": {
            "type": "integer",
            "format": "int32"
          },
          "gender": {
            "$ref": "#/components/schemas/ContactGenderDto"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nationality": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "lastSale": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "keyRegimeCode": {
            "type": "string",
            "nullable": true
          },
          "customerAccount": {
            "type": "string",
            "nullable": true
          },
          "occupation": {
            "type": "string",
            "nullable": true
          },
          "centerName": {
            "type": "string",
            "nullable": true
          },
          "observations": {
            "type": "string",
            "nullable": true
          },
          "originContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Title"
              }
            ]
          },
          "workCenter": {
            "type": "string",
            "nullable": true
          },
          "activeCall": {
            "$ref": "#/components/schemas/ActiveCallDto"
          },
          "lastInteraction": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextInteraction": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dontWantCalls": {
            "type": "boolean",
            "nullable": true
          },
          "faculties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacultyDto"
            }
          },
          "specialities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecialityDto"
            }
          },
          "processes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessChildViewModel"
            }
          },
          "contactPhone": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactPhoneDto"
            }
          },
          "contactEmail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactEmailDto"
            }
          },
          "contactAddress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactAddressDto"
            }
          },
          "contactTitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactTitleDto"
            }
          },
          "contactLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactLanguageDto"
            }
          },
          "saleAttempts": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isClient": {
            "type": "boolean"
          },
          "requestIp": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CourseCountryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "originalCountryId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "hreflangCode": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "currencyName": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "currencyFormat": {
            "type": "string"
          },
          "geoApiId": {
            "type": "integer",
            "format": "int32"
          },
          "logo": {
            "type": "string"
          },
          "inverseLogo": {
            "type": "string"
          },
          "flagIcon": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageDto"
          },
          "languageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "seoUrl": {
            "type": "string"
          },
          "defaultCountry": {
            "type": "boolean",
            "nullable": true
          },
          "mirrorCountryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "generateCatalog": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CurrencyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "currencyCode": {
            "type": "string"
          },
          "currencySymbol": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "currencyDisplayFormat": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Title": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Mister",
          "Missus",
          "Miss",
          "Doctor",
          "Professor"
        ],
        "enum": [
          "mister",
          "missus",
          "miss",
          "doctor",
          "professor"
        ]
      },
      "ActiveCallDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "actionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ProcessChildViewModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "colour": {
            "type": "string",
            "nullable": true
          },
          "ordersImported": {
            "$ref": "#/components/schemas/OrdersImportedDto"
          },
          "discardReasonProcess": {
            "$ref": "#/components/schemas/DiscardReasonProcessDto"
          },
          "university": {
            "$ref": "#/components/schemas/University"
          }
        }
      },
      "OrdersImportedDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "studentNif": {
            "type": "string",
            "nullable": true
          },
          "studentName": {
            "type": "string",
            "nullable": true
          },
          "studentSurName": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "postsalCode": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "town": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "orderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "observations": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "webUrl": {
            "type": "string",
            "nullable": true
          },
          "discount": {
            "type": "string",
            "nullable": true
          },
          "amountBase": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "amountFinal": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "amountRegistration": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "amountDeadLines": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "numberDeadLines": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "firstPaymentInEuro": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "nullable": true
          },
          "occupation": {
            "type": "string",
            "nullable": true
          },
          "academicTitle": {
            "type": "string",
            "nullable": true
          },
          "university": {
            "type": "string",
            "nullable": true
          },
          "teleoperator": {
            "type": "string",
            "nullable": true
          },
          "registrationAgain": {
            "type": "string",
            "nullable": true
          },
          "enterprise": {
            "type": "string",
            "nullable": true
          },
          "initDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "durationCourseInDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "area": {
            "type": "string",
            "nullable": true
          },
          "salesCountry": {
            "type": "string",
            "nullable": true
          },
          "currencyCountry": {
            "type": "string",
            "nullable": true
          },
          "endorsementPersonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "studentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "intensive": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseCode": {
            "type": "string",
            "nullable": true
          },
          "study": {
            "type": "string",
            "nullable": true
          },
          "programType": {
            "type": "string",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "teamId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "orderOriginNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "clientNotificationSent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isEnrollmentUpload": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "orderHeaderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "invoiceHeaderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "newStudentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "newCustomerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "actionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "affiliateCode": {
            "type": "string"
          },
          "importedFromTlmk": {
            "type": "boolean"
          },
          "paymentType": {
            "type": "string"
          },
          "businessCountry": {
            "$ref": "#/components/schemas/CountryDto"
          },
          "currencySaleCountry": {
            "$ref": "#/components/schemas/CountryDto"
          },
          "process": {
            "$ref": "#/components/schemas/ProcessChildDto"
          },
          "action": {
            "$ref": "#/components/schemas/ActionChildDto"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactChildDto"
          }
        }
      },
      "CountryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyId": {
            "type": "integer",
            "format": "int32"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "phonePrefix": {
            "type": "string"
          },
          "dateFormat": {
            "type": "string"
          }
        }
      },
      "ProcessChildDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "colour": {
            "type": "string"
          }
        }
      },
      "ContactChildDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "DiscardReasonProcessDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "discardReasonId": {
            "type": "integer",
            "format": "int32"
          },
          "discardReason": {
            "$ref": "#/components/schemas/DiscardReasonDto"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "observations": {
            "type": "string"
          }
        }
      },
      "DiscardReasonDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "observations": {
            "type": "boolean"
          }
        }
      },
      "University": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "TechUniversity",
          "TechFP"
        ],
        "enum": [
          "techUniversity",
          "techFP"
        ]
      },
      "ContactPhoneDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "phoneTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "phoneType": {
            "$ref": "#/components/schemas/PhoneTypeDto"
          },
          "phone": {
            "type": "string"
          },
          "phonePrefix": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "PhoneTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ContactEmailDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "emailTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "emailType": {
            "$ref": "#/components/schemas/EmailTypeDto"
          },
          "email": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "EmailTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ContactAddressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "addressTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "addressType": {
            "$ref": "#/components/schemas/AddressTypeDto"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int32"
          },
          "country": {
            "$ref": "#/components/schemas/CountryDto"
          },
          "province": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "AddressTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ContactTitleDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "titleTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "academicInstitution": {
            "type": "string"
          },
          "degree": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "titleType": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TitleTypeDto"
              }
            ]
          }
        }
      },
      "TitleTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ContactCreated": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "correlationId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateContactCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "createProcess": {
                "type": "boolean",
                "nullable": true
              },
              "selectedProcessType": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProcessType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ProcessType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Sale",
          "NonPayment",
          "SupportTicket",
          "Validation",
          "Apostille",
          "CampusQuery",
          "Claims",
          "FUNDAE",
          "CFG",
          "AuthorCertificate",
          "NotesCertificate",
          "None",
          "Coupons",
          "Records",
          "Cancelled",
          "Activations",
          "Recoveries",
          "Visits",
          "CouponsPrePurchase",
          "CouponsDossier",
          "CouponsInformation",
          "CouponsContact",
          "CouponsDiscount",
          "CouponsRematricula",
          "Records2",
          "CouponsBarn",
          "Couponstrackweb",
          "Coupons2"
        ],
        "enum": [
          "sale",
          "nonpayment",
          "supportticket",
          "validation",
          "apostille",
          "campusquery",
          "claims",
          "fundae",
          "cfg",
          "authorcertificate",
          "notescertificate",
          "none",
          "coupons",
          "records",
          "cancelled",
          "activations",
          "recoveries",
          "visits",
          "couponsprepurchase",
          "couponsdossier",
          "couponsinformation",
          "couponscontact",
          "couponsdiscount",
          "couponsrematricula",
          "records2",
          "couponsbarn",
          "couponstrackweb",
          "coupons2"
        ]
      },
      "ContactCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "firstSurName": {
            "type": "string"
          },
          "secondSurName": {
            "type": "string"
          },
          "studentCIF": {
            "type": "string",
            "nullable": true
          },
          "fiscalCIF": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "contactTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "contactStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "mainArea": {
            "type": "string",
            "nullable": true
          },
          "mainSpeciality": {
            "type": "string",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "nullable": true
          },
          "profession": {
            "type": "string",
            "nullable": true
          },
          "career": {
            "type": "string",
            "nullable": true
          },
          "contactGenderId": {
            "type": "integer",
            "format": "int32"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "lastSale": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "keyRegimeCode": {
            "type": "string",
            "nullable": true
          },
          "customerAccount": {
            "type": "string",
            "nullable": true
          },
          "occupation": {
            "type": "string",
            "nullable": true
          },
          "centerName": {
            "type": "string",
            "nullable": true
          },
          "observations": {
            "type": "string",
            "nullable": true
          },
          "originContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastInteraction": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextInteraction": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Title"
              }
            ]
          },
          "workCenter": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactPhoneCreateDto"
            }
          },
          "contactEmail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactEmailCreateDto"
            }
          },
          "contactAddress": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactAddressCreateDto"
            }
          },
          "contactLeads": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactLeadCreateDto"
            }
          },
          "contactTitles": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactTitleCreateDto"
            }
          },
          "contactLanguages": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactLanguageCreateDto"
            }
          },
          "faculties": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FacultyContactCreateDto"
            }
          },
          "specialities": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SpecialityContactCreateDto"
            }
          },
          "createProcess": {
            "type": "boolean",
            "nullable": true
          },
          "processtype": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProcessType"
              }
            ]
          },
          "couponOriginId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "university": {
            "$ref": "#/components/schemas/University"
          },
          "guid": {
            "type": "string",
            "format": "guid"
          },
          "requestIp": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ContactPhoneCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "phoneTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "phone": {
            "type": "string"
          },
          "phonePrefix": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "ContactEmailCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "emailTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "ContactAddressCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "addressTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "province": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "ContactLeadCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "courseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseDataId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "courseCountryId": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "finalPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "courseTypeName": {
            "type": "string"
          },
          "facultyName": {
            "type": "string"
          },
          "areaUrl": {
            "type": "string",
            "nullable": true
          },
          "facultyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "enrollmentPercentage": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "fees": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isFavourite": {
            "type": "boolean"
          },
          "emailSent": {
            "type": "boolean"
          },
          "messageSent": {
            "type": "boolean"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "convocationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactLeadType"
            }
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "courseTypeBaseCode": {
            "type": "string"
          },
          "startDateCourse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "finishDateCourse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "languageCode": {
            "type": "string"
          },
          "languageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "university": {
            "$ref": "#/components/schemas/University"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "courseCode": {
            "type": "string"
          }
        }
      },
      "ContactLeadType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Recommended",
          "Contact",
          "Demo",
          "Dossier",
          "PreEnrolment",
          "PromotionalCode",
          "Visit",
          "Enquiry"
        ],
        "enum": [
          "recommended",
          "contact",
          "demo",
          "dossier",
          "preEnrolment",
          "promotionalCode",
          "visit",
          "enquiry"
        ]
      },
      "ContactTitleCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "titleTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "academicInstitution": {
            "type": "string"
          },
          "degree": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          }
        }
      },
      "ContactLanguageCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "languageId": {
            "type": "integer",
            "format": "int32"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "FacultyContactCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facultyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "SpecialityContactCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "specialityId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateContactCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ContactUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "firstSurName": {
            "type": "string",
            "nullable": true
          },
          "secondSurName": {
            "type": "string",
            "nullable": true
          },
          "studentCIF": {
            "type": "string",
            "nullable": true
          },
          "fiscalCIF": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "contactTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactStatusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "profession": {
            "type": "string",
            "nullable": true
          },
          "contactGenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Title"
              }
            ]
          },
          "workCenter": {
            "type": "string",
            "nullable": true
          },
          "dontWantCalls": {
            "type": "boolean",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "contactPhone": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactPhoneUpdateDto"
            }
          },
          "contactEmail": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactEmailUpdateDto"
            }
          },
          "contactAddress": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactAddressUpdateDto"
            }
          },
          "contactTitles": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactTitleUpdateDto"
            }
          },
          "contactLanguages": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactLanguageUpdateDto"
            }
          },
          "faculties": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FacultyDto"
            }
          },
          "specialities": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SpecialityDto"
            }
          },
          "couponOriginId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requestIp": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ContactPhoneUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "phoneTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "phone": {
            "type": "string"
          },
          "phonePrefix": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "ContactEmailUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "emailTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "ContactAddressUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "addressTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "ContactTitleUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "titleTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "academicInstitution": {
            "type": "string"
          },
          "degree": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          }
        }
      },
      "ContactLanguageUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "languageId": {
            "type": "integer",
            "format": "int32"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          }
        }
      },
      "AddContactToBlacklistCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "newContactStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "newStatusReason": {
            "type": "string",
            "nullable": true
          },
          "newStatusObservations": {
            "type": "string",
            "nullable": true
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AddCourseToFavouriteCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactLeadId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "courseFavourite": {
            "type": "boolean"
          }
        }
      },
      "ContactInfoDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "canCreateProcess": {
            "type": "boolean"
          },
          "isBlackList": {
            "type": "boolean"
          },
          "replaceable": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CreateContactLeadCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactLeadCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ContactLeadDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "countryCode": {
            "type": "string"
          },
          "userCountryCode": {
            "type": "string"
          },
          "currencyCountryCode": {
            "type": "string"
          },
          "areaUrl": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "courseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "course": {
            "$ref": "#/components/schemas/CourseDto"
          },
          "courseDataId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseData": {
            "$ref": "#/components/schemas/CourseDataDto"
          },
          "originalCourseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enquiry": {
            "type": "string"
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "url": {
            "type": "string"
          },
          "accessUrl": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "currency": {
            "type": "string"
          },
          "currencyDisplayFormat": {
            "type": "string"
          },
          "currencySymbol": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "isFavourite": {
            "type": "boolean"
          },
          "emailSent": {
            "type": "boolean"
          },
          "messageSent": {
            "type": "boolean"
          },
          "specialities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecialityDto"
            }
          },
          "faculty": {
            "$ref": "#/components/schemas/FacultyDto"
          },
          "idContactTypes": {
            "type": "string"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactLeadType"
            }
          },
          "courseCountryId": {
            "type": "integer",
            "format": "int32"
          },
          "finalPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "enrollmentPercentage": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "fees": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseTypeName": {
            "type": "string"
          },
          "contactTrackerDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "convocationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "courseTypeBaseCode": {
            "type": "string"
          },
          "courseTypeBase": {
            "$ref": "#/components/schemas/CourseTypeBaseDto"
          },
          "startDateCourse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "finishDateCourse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "languageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "nullable": true
          },
          "couponOriginId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "couponOrigin": {
            "$ref": "#/components/schemas/CouponsOriginsDto"
          },
          "university": {
            "$ref": "#/components/schemas/University"
          },
          "courseCode": {
            "type": "string"
          }
        }
      },
      "CourseDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "originalCourseId": {
            "type": "integer",
            "format": "int32"
          },
          "courseTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseType": {
            "$ref": "#/components/schemas/CourseTypeDto"
          },
          "title": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "guarantor": {
            "$ref": "#/components/schemas/GuarantorDto"
          },
          "courseFaculties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseFacultyDto"
            }
          },
          "courseSpecialities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseSpecialityDto"
            }
          }
        }
      },
      "CourseTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "GuarantorDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "originalGuarantorId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "longName": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "CourseFacultyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facultyId": {
            "type": "integer",
            "format": "int32"
          },
          "faculty": {
            "$ref": "#/components/schemas/FacultyDto"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CourseSpecialityDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "specialityId": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "speciality": {
            "$ref": "#/components/schemas/SpecialityDto"
          }
        }
      },
      "CourseDataDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "seoTitle": {
            "type": "string"
          }
        }
      },
      "CourseTypeBaseDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "originalCourseTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "seoUrl": {
            "type": "string",
            "nullable": true
          },
          "seoTitle": {
            "type": "string",
            "nullable": true
          },
          "seoKeywords": {
            "type": "string",
            "nullable": true
          },
          "seoDescription": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "canBeParent": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "isPractical": {
            "type": "boolean"
          },
          "guarantorType": {
            "type": "string",
            "nullable": true
          },
          "modality": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CouponsOriginsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AddContactFacultiesCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactFacultiesCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ContactFacultiesCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facultiesId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RemoveContactFacultyCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facultyId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AddContactSpecialitiesCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactSpecialitiesCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ContactSpecialitiesCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "specialitiesId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RemoveContactSpecialitiesCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "specialitiesId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ContactInfoTlmkDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "firstSurName": {
            "type": "string"
          },
          "secondSurName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "idCard": {
            "type": "string"
          },
          "profession": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nationality": {
            "type": "string"
          },
          "titleType": {
            "type": "string"
          },
          "academicInstitution": {
            "type": "string"
          }
        }
      },
      "AddNewContactEmailCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "emailTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "UpdateCountryCodeCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "countryCode": {
            "type": "string"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateCurrencyCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "currencyId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateContactLeadCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactLeadUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ContactLeadUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactLeadId": {
            "type": "integer",
            "format": "int32"
          },
          "finalPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "enrollmentPercentage": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "fees": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseCode": {
            "type": "string"
          },
          "startDateCourse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "finishDateCourse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "convocationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "courseTypeBaseCode": {
            "type": "string",
            "nullable": true
          },
          "types": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactLeadType"
            }
          }
        }
      },
      "UpdateContactLeadsCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactLeads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactLeadUpdateDto"
            }
          }
        }
      },
      "UpdateContactLeadPriceCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactLeadPriceUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ContactLeadPriceUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactLeadId": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "finalPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "enrollmentPercentage": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "fees": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ContactGetted": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "correlationId": {
            "type": "string",
            "format": "guid"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "firstSurName": {
            "type": "string"
          },
          "secondSurName": {
            "type": "string"
          },
          "guidId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "ContactUserDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "RecoverContactActivationsCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "processId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ValidationProblemDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HttpValidationProblemDetails"
          },
          {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "HttpValidationProblemDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          },
          {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ConsolidateContactsCommand": {
        "type": "object",
        "description": "It is used to transfer the data from the source email to the destination email.\n            ",
        "additionalProperties": false,
        "properties": {
          "destinationEmail": {
            "type": "string",
            "description": "Email where the data will be transferred."
          },
          "originEmail": {
            "type": "string",
            "description": "Email with the data to be transferred."
          }
        }
      },
      "ConsolidateContactsByIdCommand": {
        "type": "object",
        "description": "It is used to \"transfer the data\" from the source contact to the destination contact by ids.\n            ",
        "additionalProperties": false,
        "properties": {
          "destinationId": {
            "type": "integer",
            "description": "Contact Id where the data will be transferred.",
            "format": "int32"
          },
          "originId": {
            "type": "integer",
            "description": "Contact Id with the data to be transferred.",
            "format": "int32"
          },
          "apiKey": {
            "type": "string"
          }
        }
      },
      "CopyToCouponFpCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateSpecialFpContactCouponDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateSpecialFpContactCouponDto": {
        "type": "object",
        "description": "Create a new fp coupon from a university coupon.\n            ",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "id de la tabla contact.",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "description": "Id de la tabla processes.",
            "format": "int32"
          }
        }
      },
      "TopSellingCourseDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facultyId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "courseCode": {
            "type": "string"
          },
          "courseTypeBaseCode": {
            "type": "string"
          },
          "courseCountryId": {
            "type": "integer",
            "format": "int32"
          },
          "countryId": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PopulateMissingInterestedCoursesResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "statisticsPeriodStart": {
            "type": "string",
            "format": "date-time"
          },
          "statisticsPeriodEnd": {
            "type": "string",
            "format": "date-time"
          },
          "totalCoursesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalCoursesSkipped": {
            "type": "integer",
            "description": "Reasons can be:\n1. No sold courses statistics found by provided criteria,\n2. No matching non-deleted coursed for statistics,\n3. Minimum required Course graph incomplete (CourseType && Faculty && Country)\n            ",
            "format": "int32"
          },
          "notFoundContactsCount": {
            "type": "integer",
            "description": "Count only in case of Specific Contacts workflow. null/absent value means that this workflow\nwas not executed and counting is not relevant.\n            ",
            "format": "int32",
            "nullable": true
          },
          "createdByFacultyCountries": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "skippedByFacultyCounties": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "exceptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Exception"
            }
          }
        }
      },
      "Exception": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Message": {
            "type": "string"
          },
          "InnerException": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Exception"
              }
            ]
          },
          "Source": {
            "type": "string",
            "nullable": true
          },
          "StackTrace": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Represents an error.",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "Gets the unique error code."
          },
          "description": {
            "type": "string",
            "description": "Gets the error description."
          },
          "type": {
            "description": "Gets the error type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ErrorType"
              }
            ]
          },
          "numericType": {
            "type": "integer",
            "description": "Gets the numeric value of the type.",
            "format": "int32"
          },
          "metadata": {
            "type": "object",
            "description": "Gets the metadata.",
            "nullable": true,
            "additionalProperties": {}
          }
        }
      },
      "ErrorType": {
        "type": "string",
        "description": "Error types.",
        "x-enumNames": [
          "Failure",
          "Unexpected",
          "Validation",
          "Conflict",
          "NotFound",
          "Unauthorized",
          "Forbidden"
        ],
        "enum": [
          "failure",
          "unexpected",
          "validation",
          "conflict",
          "notFound",
          "unauthorized",
          "forbidden"
        ]
      },
      "PopulateMissingInterestedCoursesCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PopulateMissingInterestedCoursesDto"
          },
          {
            "type": "object",
            "description": "Command to create missing Interested Courses for Contacts accoring using one of the possible workflows.",
            "additionalProperties": false,
            "properties": {
              "apiKey": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PopulateMissingInterestedCoursesDto": {
        "type": "object",
        "description": "Command to create missing Interested Courses for Contacts accoring using one of the possible workflows.",
        "additionalProperties": false,
        "properties": {
          "area": {
            "type": "string",
            "description": "Area/FacultyName to work with. Accepts wildcard character * to work with all faculties.\n            "
          },
          "countryCode": {
            "type": "string",
            "description": "Contact country code. Accepts wildcard character * to work with all countries.\n            "
          },
          "maxJobContacts": {
            "type": "integer",
            "description": "Must be provided in case of Specific Contacts workflow is intended.\nTotal maximum number of contacts to work with.\nIf omitted or 0, then job will not execute.\nIf wildcard value of -1 is used then all then Contacts will be processed, that are missing\ninterested course.\nWill be ignored when ContactIds are provided.\n            ",
            "format": "int32",
            "nullable": true
          },
          "contactIds": {
            "type": "array",
            "description": "Optional. If provided, then Specific Contacts workflow will be executed, so only these contacts are\nanalyzed for missing interested courses and Area and CountryCode\nwill be ignored.\nParameter MaxJobContacts will be ignored in this case.\n            ",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "PaginatedListOfEmailPaginationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailPaginationDto"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "EmailPaginationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserEmailContactPaginationDto"
          },
          "actionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/ActionEmailContactPaginationDto"
          },
          "from": {
            "type": "string"
          },
          "fromName": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "UserEmailContactPaginationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ActionEmailContactPaginationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "process": {
            "$ref": "#/components/schemas/ProcessActionEmailContactPaginationDto"
          }
        }
      },
      "ProcessActionEmailContactPaginationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "Colour": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Green",
          "GreenYellow",
          "Yellow",
          "Red",
          "Grey"
        ],
        "enum": [
          "",
          "green",
          "greenyellow",
          "yellow",
          "red",
          "grey"
        ]
      },
      "EmailFullDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactEmailFullDto"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserEmailFullDto"
          },
          "actionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/ActionEmailFullDto"
          },
          "from": {
            "type": "string"
          },
          "fromName": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "bcc": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "emailTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentEmailFullDto"
            }
          }
        }
      },
      "ContactEmailFullDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "UserEmailFullDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ActionEmailFullDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "process": {
            "$ref": "#/components/schemas/ProcessActionEmailContactPaginationDto"
          }
        }
      },
      "AttachmentEmailFullDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "GetMailBoxFreeQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "SendEmailCommercialAssignmentCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SendEmailCommercialAssignment"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "apiKey": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SendEmailCommercialAssignment": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "correlationId": {
            "$ref": "#/components/schemas/NewId"
          },
          "processIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "NewId": {
        "type": "object",
        "description": "A NewId is a type that fits into the same space as a Guid/Uuid/unique identifier,\nbut is guaranteed to be both unique and ordered, assuming it is generated using\na single instance of the generator for each network address used.",
        "additionalProperties": false,
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SendEmailRecords2ScholarshipActivationCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SendEmailRecords2ScholarshipActivation"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "apiKey": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SendEmailRecords2ScholarshipActivation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "correlationId": {
            "$ref": "#/components/schemas/NewId"
          },
          "processIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "SendEmailCloseProcessesCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SendEmailCloseProcesses"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "apiKey": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SendEmailCloseProcesses": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "correlationId": {
            "$ref": "#/components/schemas/NewId"
          },
          "processIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "EmployeeSubordinateViewModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "organizationNodeName": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetAllManagerSubordinatesQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "ManagerDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "givenName": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "corporatePhone": {
            "type": "string"
          },
          "corporateEmail": {
            "type": "string"
          }
        }
      },
      "GetManagerByEmployeeQuery": {
        "type": "object",
        "additionalProperties": false
      },
      "EmployeeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "gender": {
            "$ref": "#/components/schemas/EmployeeGender"
          },
          "corporatePhonePrefix": {
            "type": "string"
          },
          "corporatePhone": {
            "type": "string"
          },
          "corporateEmail": {
            "type": "string"
          }
        }
      },
      "EmployeeGender": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Female",
          "Male",
          "NonBinary"
        ],
        "enum": [
          "female",
          "male",
          "nonbinary"
        ]
      },
      "FlowDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "processType": {
            "$ref": "#/components/schemas/ProcessType"
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalSteps": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Unit": {
        "type": "object",
        "description": "Represents a void type, since Void is not a valid return type in C#.",
        "additionalProperties": false
      },
      "DuplicateFlowCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowDuplicateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "FlowDuplicateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "originProcessType": {
            "$ref": "#/components/schemas/ProcessType"
          },
          "originTagId": {
            "type": "integer",
            "format": "int32"
          },
          "processType": {
            "$ref": "#/components/schemas/ProcessType"
          },
          "tagId": {
            "type": "integer",
            "format": "int32"
          },
          "tagName": {
            "type": "string"
          }
        }
      },
      "PaginatedListOfInvoicePaymentOptionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentOptionDto"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "InvoicePaymentOptionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "invoicePaymentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "string"
          },
          "holder": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "hasNonPayment": {
            "type": "boolean"
          },
          "invoicePaymentType": {
            "$ref": "#/components/schemas/InvoicePaymentTypeDto"
          }
        }
      },
      "InvoicePaymentTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "invoicePaymentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CreateInvoicePaymentOptionCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvoicePaymentOptionCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "InvoicePaymentOptionCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "invoicePaymentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "string"
          },
          "holder": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactChildDto"
            }
          }
        }
      },
      "UpdateInvoicePaymentOptionCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvoicePaymentOptionUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "InvoicePaymentOptionUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "invoicePaymentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "string"
          },
          "holder": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactChildDto"
            }
          }
        }
      },
      "PaginatedListOfOrdersImportedDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrdersImportedDto"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "CreateOrdersImportedFromTlmkCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PedidoTlmkDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "apiKey": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PedidoTlmkDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "numPedido": {
            "type": "integer",
            "format": "int32"
          },
          "numPedidoAnterior": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "numPedidoOriginal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "idCurso": {
            "type": "integer",
            "format": "int32"
          },
          "idWeb": {
            "type": "integer",
            "format": "int32"
          },
          "nif": {
            "type": "string"
          },
          "nombre": {
            "type": "string"
          },
          "apellidos": {
            "type": "string"
          },
          "direccion": {
            "type": "string"
          },
          "codpos": {
            "type": "string"
          },
          "provincia": {
            "type": "string"
          },
          "pobl": {
            "type": "string"
          },
          "pais": {
            "type": "string"
          },
          "telefono": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fechaPedido": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tipoPago": {
            "type": "string"
          },
          "observaciones": {
            "type": "string"
          },
          "titulo": {
            "type": "string"
          },
          "unidades": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "precio": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sexo": {
            "type": "integer",
            "format": "int32"
          },
          "web": {
            "type": "string"
          },
          "descuento": {
            "type": "string"
          },
          "precioFinal": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "precioMatricula": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "precioPlazos": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "nplazos": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "nacionalidad": {
            "type": "string"
          },
          "profesion": {
            "type": "string"
          },
          "titulacion": {
            "type": "string"
          },
          "universidad": {
            "type": "string"
          },
          "teleoperadora": {
            "type": "string"
          },
          "ntarjeta": {
            "type": "string"
          },
          "tokenPedido": {
            "type": "string"
          },
          "ncuenta": {
            "type": "string"
          },
          "rematricula": {
            "type": "string"
          },
          "empresa": {
            "type": "string"
          },
          "refRedsys": {
            "type": "string"
          },
          "fechaNacimiento": {
            "type": "string",
            "format": "date-time"
          },
          "fechaInicio": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "area": {
            "type": "string"
          },
          "paisVenta": {
            "type": "string"
          },
          "paisMoneda": {
            "type": "string"
          },
          "idAvalista": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "idStudent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "intensive": {
            "type": "boolean"
          },
          "affiliateCode": {
            "type": "string"
          },
          "affiliateComissionPercent": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "promotionalCode": {
            "type": "string"
          },
          "courseCode": {
            "type": "string"
          },
          "study": {
            "type": "string"
          },
          "programType": {
            "type": "string"
          },
          "codigoPedidoRedsys": {
            "type": "string"
          },
          "importeCobroRedsys": {
            "type": "number",
            "format": "float"
          },
          "plataformaPago": {
            "type": "string"
          },
          "duracion": {
            "type": "string"
          },
          "fechaFin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creditos": {
            "type": "number",
            "format": "float"
          },
          "primerPagoEUR": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "primerPago": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "divisaPrimerPago": {
            "type": "string",
            "nullable": true
          },
          "ratio": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "idFactura": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "politicasPrivacidadAceptadas": {
            "type": "boolean",
            "nullable": true
          },
          "condicionesContratacionAceptadas": {
            "type": "boolean",
            "nullable": true
          },
          "isRenewal": {
            "type": "boolean"
          },
          "importeRenovacion": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "numPedidoOrigen": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "clientNotificationsSent": {
            "type": "boolean",
            "nullable": true
          },
          "isEnrollmentUpload": {
            "type": "boolean",
            "nullable": true
          },
          "durationCourseInDays": {
            "type": "integer",
            "format": "int32"
          },
          "idPago": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "idIdioma": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "idioma": {
            "type": "string",
            "nullable": true
          },
          "tituloIdioma": {
            "type": "string",
            "nullable": true
          },
          "areaIdioma": {
            "type": "string",
            "nullable": true
          },
          "estudioIdioma": {
            "type": "string",
            "nullable": true
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "SetProcessStatusByOrderNumberCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ProcessStatus"
          },
          "outcome": {
            "$ref": "#/components/schemas/ProcessOutcome"
          },
          "paymentType": {
            "type": "string"
          }
        }
      },
      "ProcessStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Ongoing",
          "Pending",
          "Closed",
          "ToDo"
        ],
        "enum": [
          "ongoing",
          "pending",
          "closed",
          "todo"
        ]
      },
      "ProcessOutcome": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Open",
          "Sale",
          "NotSale",
          "Resolved",
          "NotResolved",
          "PaymentMethodPending",
          "Pending",
          "NotValid"
        ],
        "enum": [
          "open",
          "sale",
          "notsale",
          "resolved",
          "notresolved",
          "paymentmethodpending",
          "pending",
          "notvalid"
        ]
      },
      "DeleteOrderImportedFromTlmkByEmailCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaginatedListOfProcessInProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessInProgressDto"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "ProcessInProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "colour": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "initialDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastActionDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextInteractionDate": {
            "type": "string",
            "format": "date-time"
          },
          "contactInProgressDto": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContactInProgressDto"
              }
            ]
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "activeCall": {
            "type": "boolean"
          },
          "attempts": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ContactInProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "firstSurname": {
            "type": "string",
            "nullable": true
          },
          "secondSurname": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "workCenter": {
            "type": "string",
            "nullable": true
          },
          "faculties": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FacultiesInProgressDto"
            }
          },
          "specialities": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SpecialitiesInProgressDto"
            }
          }
        }
      },
      "FacultiesInProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "color": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "seoUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SpecialitiesInProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "seoUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaginatedListOfProcessDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessDto"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "ProcessTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ProcessSaleStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "saleComplete": {
            "type": "boolean"
          }
        }
      },
      "ProcessSaleAttemtpsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "saleAttemtps": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateProcessCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProcessCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ProcessCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "guid": {
            "type": "string",
            "format": "guid"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "processOrigin": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "colour": {
            "type": "string",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionDto"
            }
          },
          "university": {
            "$ref": "#/components/schemas/University"
          }
        }
      },
      "ActionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ordersImportedId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "process": {
            "$ref": "#/components/schemas/ProcessChildDto"
          },
          "ordersImported": {
            "$ref": "#/components/schemas/OrdersImportedChildDto"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "finishDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/EmailActionDto"
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentChildDto"
            }
          }
        }
      },
      "EmailActionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "from": {
            "type": "string"
          },
          "fromName": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SetWebSaleProcessByEmailOrPhoneOrDniCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "dni": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateProcessCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProcessUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ProcessUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "colour": {
            "type": "string"
          },
          "discardReasonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discardReasonObservations": {
            "type": "string",
            "nullable": true
          },
          "university": {
            "$ref": "#/components/schemas/University"
          }
        }
      },
      "CloseProcessSaleByOrderNumberOrEmailCommand": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OrderImportedUpdateDto"
        }
      },
      "OrderImportedUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "nif": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ReassignProcessCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExternalSuccessfulSaleProcessCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalSaleDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ExternalSaleDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "studentName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "academicTitle": {
            "type": "string",
            "nullable": true
          },
          "initDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "currencyCountry": {
            "type": "string",
            "nullable": true
          },
          "numberDeadLines": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salesCountry": {
            "type": "string",
            "nullable": true
          },
          "amountRegistration": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "PaginatedListOfTemplateProposalDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateProposalDto"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "TemplateProposalDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "processType": {
            "$ref": "#/components/schemas/ProcessType"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "attempt": {
            "type": "integer",
            "format": "int32"
          },
          "colour": {
            "$ref": "#/components/schemas/Colour"
          },
          "courseKnown": {
            "type": "boolean"
          },
          "courseTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasToSendEmail": {
            "type": "boolean"
          },
          "hasToSendWhatsApp": {
            "type": "boolean"
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "team": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateTemplateProposalCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TemplateProposalCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TemplateProposalCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "processType": {
            "$ref": "#/components/schemas/ProcessType"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "attempt": {
            "type": "integer",
            "format": "int32"
          },
          "colour": {
            "$ref": "#/components/schemas/Colour"
          },
          "courseKnown": {
            "type": "boolean"
          },
          "courseTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasToSendEmail": {
            "type": "boolean"
          },
          "hasToSendWhatsApp": {
            "type": "boolean"
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UpdateTemplateProposalCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TemplateProposalUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TemplateProposalUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "processType": {
            "$ref": "#/components/schemas/ProcessType"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "attempt": {
            "type": "integer",
            "format": "int32"
          },
          "colour": {
            "$ref": "#/components/schemas/Colour"
          },
          "courseKnown": {
            "type": "boolean"
          },
          "courseTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasToSendEmail": {
            "type": "boolean"
          },
          "hasToSendWhatsApp": {
            "type": "boolean"
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "TemplateProposalTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "templateProposalId": {
            "type": "integer",
            "format": "int32"
          },
          "templateId": {
            "type": "integer",
            "format": "int32"
          },
          "template": {
            "$ref": "#/components/schemas/TemplateDetailsDto"
          }
        }
      },
      "TemplateDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "colour": {
            "type": "string"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "attempt": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "courseNeeded": {
            "type": "boolean"
          },
          "courseKnown": {
            "type": "boolean"
          },
          "languageId": {
            "type": "integer",
            "format": "int32"
          },
          "tagId": {
            "type": "integer",
            "format": "int32"
          },
          "team": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "$ref": "#/components/schemas/LanguageDto"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fromEmail": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "nullable": true
          },
          "courseNeeded": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "languageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "language": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LanguageDto"
              }
            ]
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "day": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attempt": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fromEmail": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SetTemplateInTemplateProposalCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "templateProposalId": {
            "type": "integer",
            "format": "int32"
          },
          "templateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PaginatedListOfTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateDto"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "CreateTemplateCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TemplateCreateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TemplateCreateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TemplateType"
          },
          "languageCode": {
            "type": "string"
          },
          "courseNeeded": {
            "type": "boolean"
          },
          "moduleId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "TemplateType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Email",
          "WhatsApp",
          "Argument"
        ],
        "enum": [
          "email",
          "whatsapp",
          "argument"
        ]
      },
      "UpdateTemplateCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TemplateUpdateDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TemplateUpdateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TemplateType"
          },
          "languageCode": {
            "type": "string"
          },
          "courseNeeded": {
            "type": "boolean"
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "DeleteTemplateInTemplateProposalCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "templateProposalId": {
            "type": "integer",
            "format": "int32"
          },
          "templateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TemplateBundleProposalViewModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "emailTemplate": {
            "$ref": "#/components/schemas/TemplateDto"
          },
          "whatsAppTemplate": {
            "$ref": "#/components/schemas/TemplateDto"
          },
          "hasToSendEmail": {
            "type": "boolean"
          },
          "hasToSendWhatsapp": {
            "type": "boolean"
          }
        }
      },
      "AffectedTemplatesViewModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "oldContentValue": {
            "type": "string"
          },
          "newContentValue": {
            "type": "string"
          },
          "affectedTemplates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "affectedTemplateLanguages": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        }
      },
      "UploadTemplateAuditoryCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "WebEnrollmentDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "guid": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "priceFormatted": {
            "type": "string"
          },
          "finalPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "finalPriceFormatted": {
            "type": "string"
          },
          "discountPercentage": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "enrollmentPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "enrollmentPriceFormatted": {
            "type": "string"
          },
          "fees": {
            "type": "integer",
            "format": "int32"
          },
          "feePrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "feePriceFormatted": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "firstSurName": {
            "type": "string"
          },
          "secondSurName": {
            "type": "string"
          },
          "idCard": {
            "type": "string"
          },
          "phonePrefix": {
            "type": "string"
          },
          "phonePrefixCountryCode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "countryCode": {
            "type": "string"
          },
          "processId": {
            "type": "integer",
            "format": "int32"
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "vendorId": {
            "type": "integer",
            "format": "int32"
          },
          "courseTypeBaseCode": {
            "type": "string"
          },
          "courseCode": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "convocationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "university": {
            "$ref": "#/components/schemas/University"
          },
          "currencyCode": {
            "type": "string"
          },
          "currencySymbol": {
            "type": "string"
          }
        }
      },
      "CreateWebEnrollmentCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebEnrollmentDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SendWhatsappCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WhatsappSendDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "WhatsappSendDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "actionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "whatsappTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "courseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "fromName": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "contactLeadId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "oidc": {
        "type": "oauth2",
        "in": "header",
        "openIdConnectUrl": "https://test.login.intranet.techtitute.com/auth/realms/intranet-test/.well-known/openid-configuration",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://test.login.intranet.techtitute.com/auth/realms/intranet-test/protocol/openid-connect/auth",
            "tokenUrl": "https://test.login.intranet.techtitute.com/auth/realms/intranet-test/protocol/openid-connect/token",
            "scopes": {
              "openid": "User Profile"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oidc": []
    }
  ]
}